{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\linq-up\\\\src\\\\components\\\\Map.jsx\";\nimport React, { Component } from \"react\";\nimport { Map, Marker, GoogleApiWrapper, InfoWindow, Circle } from \"google-maps-react\";\nexport class MapContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {}\n    };\n\n    this.displayMarkers = () => {\n      return this.props.coords.map((address, index) => {\n        return /*#__PURE__*/React.createElement(Marker, {\n          onClick: this.onMarkerClick,\n          key: index,\n          id: index,\n          name: this.props.addresses[index],\n          position: {\n            lat: address.lat,\n            lng: address.lng\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 14,\n            columnNumber: 9\n          }\n        });\n      });\n    };\n\n    this.displayPlacesMarkers = () => {\n      let coordsPlaces = [];\n      let placesNames = [];\n\n      for (let i of this.props.nearbyPlaces) {\n        coordsPlaces.push(i.geometry.location);\n        placesNames.push(i.name);\n      }\n\n      return coordsPlaces.map((address, index) => {\n        return /*#__PURE__*/React.createElement(Marker, {\n          onClick: this.onMarkerClick,\n          key: \"p\" + index,\n          id: \"p\" + index,\n          name: placesNames[index],\n          position: {\n            lat: address.lat,\n            lng: address.lng\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 9\n          }\n        });\n      });\n    };\n\n    this.onMarkerClick = (props, marker) => {\n      this.setState({\n        selectedPlace: props,\n        activeMarker: marker,\n        showingInfoWindow: true\n      });\n    };\n\n    this.onClose = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n  }\n\n  shouldComponentUpdate(nextProps) {\n    //prevents useless rerenders when user fidgets with radius slider\n    if (nextProps.radius !== this.props.radius) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Map, {\n      google: this.props.google,\n      zoom: 8,\n      style: {\n        width: \"40%\",\n        height: \"50%\"\n      },\n      initialCenter: {\n        lat: this.props.currentLocation[0],\n        lng: this.props.currentLocation[1]\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }\n    }, this.displayMarkers(), this.displayPlacesMarkers(), /*#__PURE__*/React.createElement(Marker, {\n      onClick: this.onMarkerClick,\n      key: \"midpoint\",\n      id: \"midpoint\",\n      name: \"midpoint\",\n      position: {\n        lat: this.props.midpoint[0],\n        lng: this.props.midpoint[1]\n      },\n      icon: {\n        url: \"http://maps.google.com/mapfiles/ms/icons/green-dot.png\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Circle, {\n      radius: parseInt(this.props.radius),\n      center: {\n        lat: this.props.midpoint[0] === \"\" ? 0 : parseFloat(this.props.midpoint[0]),\n        lng: this.props.midpoint[0] === \"\" ? 0 : parseFloat(this.props.midpoint[1])\n      },\n      strokeColor: \"transparent\",\n      strokeOpacity: 0,\n      strokeWeight: 5,\n      fillColor: \"#FF0000\",\n      fillOpacity: 0.2,\n      visible: this.props.POI === \"\" ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(InfoWindow, {\n      marker: this.state.activeMarker,\n      visible: this.state.showingInfoWindow,\n      onClose: this.onClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }\n    }, this.state.selectedPlace.name))));\n  }\n\n}\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyAF6LzDWnCO0yQ3_xVfXMYicN6MqUFl4q0\"\n})(MapContainer);","map":{"version":3,"sources":["C:/Users/Alex/linq-up/src/components/Map.jsx"],"names":["React","Component","Map","Marker","GoogleApiWrapper","InfoWindow","Circle","MapContainer","state","showingInfoWindow","activeMarker","selectedPlace","displayMarkers","props","coords","map","address","index","onMarkerClick","addresses","lat","lng","displayPlacesMarkers","coordsPlaces","placesNames","i","nearbyPlaces","push","geometry","location","name","marker","setState","onClose","shouldComponentUpdate","nextProps","radius","render","google","width","height","currentLocation","midpoint","url","parseInt","parseFloat","POI","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Map, Marker, GoogleApiWrapper, InfoWindow, Circle } from \"google-maps-react\";\r\n\r\nexport class MapContainer extends Component {\r\n  state = {\r\n    showingInfoWindow: false,\r\n    activeMarker: {},\r\n    selectedPlace: {},\r\n  };\r\n\r\n  displayMarkers = () => {\r\n    return this.props.coords.map((address, index) => {\r\n      return (\r\n        <Marker\r\n          onClick={this.onMarkerClick}\r\n          key={index}\r\n          id={index}\r\n          name={this.props.addresses[index]}\r\n          position={{\r\n            lat: address.lat,\r\n            lng: address.lng,\r\n          }}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n\r\n  displayPlacesMarkers = () => {\r\n\r\n    let coordsPlaces = []\r\n    let placesNames = []\r\n\r\n    for (let i of this.props.nearbyPlaces) {\r\n      coordsPlaces.push(i.geometry.location)\r\n      placesNames.push(i.name)\r\n    }\r\n\r\n    return coordsPlaces.map((address, index) => {\r\n      return (\r\n        <Marker\r\n          onClick={this.onMarkerClick}\r\n          key={\"p\"+index}\r\n          id={\"p\"+index}\r\n          name={placesNames[index]}\r\n          position={{\r\n            lat: address.lat,\r\n            lng: address.lng,\r\n          }}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  onMarkerClick = (props, marker) => {\r\n  this.setState({\r\n    selectedPlace: props,\r\n    activeMarker: marker,\r\n    showingInfoWindow: true\r\n  });\r\n\r\n}\r\n\r\n\r\nonClose = props => {\r\n  if (this.state.showingInfoWindow) {\r\n    this.setState({\r\n      showingInfoWindow: false,\r\n      activeMarker: null\r\n    });\r\n  }\r\n};\r\n\r\nshouldComponentUpdate(nextProps) {\r\n\r\n  //prevents useless rerenders when user fidgets with radius slider\r\n\r\n  if (nextProps.radius !== this.props.radius) {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <Map\r\n        google={this.props.google}\r\n        zoom={8}\r\n        style={{\r\n          width: \"40%\",\r\n          height: \"50%\",\r\n        }}\r\n        initialCenter={{\r\n          lat: this.props.currentLocation[0],\r\n          lng: this.props.currentLocation[1],\r\n        }}\r\n      >\r\n        {this.displayMarkers()}\r\n        {this.displayPlacesMarkers()}\r\n        <Marker\r\n          onClick={this.onMarkerClick}\r\n          key=\"midpoint\"\r\n          id=\"midpoint\"\r\n          name=\"midpoint\"\r\n          position={{\r\n            lat: this.props.midpoint[0],\r\n            lng: this.props.midpoint[1],\r\n          }}\r\n          icon={{\r\n            url: \"http://maps.google.com/mapfiles/ms/icons/green-dot.png\",\r\n          }\r\n          }\r\n        ></Marker>\r\n\r\n        <Circle\r\n        radius={parseInt(this.props.radius)}\r\n        center={{\r\n          lat: (this.props.midpoint[0]=== \"\" ? 0 : parseFloat(this.props.midpoint[0])),\r\n          lng: (this.props.midpoint[0]=== \"\" ? 0 : parseFloat(this.props.midpoint[1])),\r\n        }}\r\n        strokeColor='transparent'\r\n        strokeOpacity={0}\r\n        strokeWeight={5}\r\n        fillColor='#FF0000'\r\n        fillOpacity={0.2}\r\n        visible={this.props.POI === \"\" ? false: true}\r\n        \r\n        ></Circle>\r\n\r\n        <InfoWindow\r\n          marker={this.state.activeMarker}\r\n          visible={this.state.showingInfoWindow}\r\n          onClose={this.onClose}\r\n        >\r\n          <div>\r\n            <h4>{this.state.selectedPlace.name}</h4>\r\n          </div>\r\n        </InfoWindow>\r\n\r\n      </Map>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: \"AIzaSyAF6LzDWnCO0yQ3_xVfXMYicN6MqUFl4q0\",\r\n})(MapContainer);\r\n"]},"metadata":{},"sourceType":"module"}