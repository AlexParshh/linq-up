{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\linq-up\\\\src\\\\components\\\\Map.jsx\";\nimport React, { Component } from \"react\";\nimport { Map, Marker, GoogleApiWrapper, InfoWindow, Circle } from \"google-maps-react\";\n\nrequire(\"dotenv\").config();\n\nexport class MapContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      currentPhoto: \"\",\n      circleLat: this.props.circleLat,\n      circleLng: this.props.circleLng\n    };\n\n    this.displayMarkers = () => {\n      return this.props.coords.map((address, index) => {\n        return /*#__PURE__*/React.createElement(Marker, {\n          onClick: this.onMarkerClick,\n          key: index,\n          id: index,\n          name: /*#__PURE__*/React.createElement(\"h4\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 17\n            }\n          }, this.props.addresses[index]),\n          pos: {\n            lat: address.lat,\n            lng: address.lng\n          },\n          position: {\n            lat: address.lat,\n            lng: address.lng\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 9\n          }\n        });\n      });\n    };\n\n    this.displayPlacesMarkers = () => {\n      let coordsPlaces = [];\n      let placesNames = [];\n      let ratings = [];\n      let photos = [];\n\n      for (let i = 0; i < this.props.nearbyPlaces.length; i++) {\n        coordsPlaces.push(this.props.nearbyPlaces[i].geometry.location);\n        placesNames.push(this.props.nearbyPlaces[i].name);\n        ratings.push(this.props.nearbyPlaces[i].rating); //if this.props.nearbyPlaces.photos[0]\n        //handles no photo error\n\n        if (this.props.nearbyPlaces[i].photos) {\n          photos.push(\"https://maps.googleapis.com/maps/api/place/photo?maxwidth=200&maxheight=200&photoreference=\" + this.props.nearbyPlaces[i].photos[0].photo_reference + \"&key=\" + process.env.REACT_APP_GOOGLE_MAPS_API_KEY);\n        } else {\n          photos.push(\"https://static.thenounproject.com/png/1339059-200.png\");\n        }\n      }\n\n      return coordsPlaces.map((address, index) => {\n        return /*#__PURE__*/React.createElement(Marker, {\n          onClick: this.onMarkerClick,\n          photo: photos[index],\n          key: \"p\" + index,\n          id: \"place\",\n          rating: ratings[index],\n          name: /*#__PURE__*/React.createElement(\"h4\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 17\n            }\n          }, placesNames[index]),\n          cleanName: placesNames[index],\n          position: {\n            lat: address.lat,\n            lng: address.lng\n          },\n          pos: {\n            lat: address.lat,\n            lng: address.lng\n          },\n          icon: {\n            url: \"http://maps.google.com/mapfiles/ms/icons/ltblue-dot.png\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 9\n          }\n        });\n      });\n    };\n\n    this.onMarkerClick = (props, marker) => {\n      this.setState({\n        selectedPlace: props,\n        activeMarker: marker,\n        showingInfoWindow: true\n      });\n      this.props.onSetMeetupPoint(this.state.activeMarker.pos);\n\n      if (this.state.activeMarker.cleanName) {\n        this.props.onSetMeetName(this.state.activeMarker.cleanName);\n      }\n    };\n\n    this.onClose = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false\n        });\n        this.props.onSetMeetupPoint({\n          lat: this.props.midpoint[0],\n          lng: this.props.midpoint[1]\n        });\n        this.props.onSetMeetName(\"\");\n      }\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.circleLat !== this.state.circleLat) {\n      this.setState({\n        circleLat: this.props.circleLat,\n        circleLng: this.props.circleLng\n      });\n    }\n  }\n\n  shouldComponentUpdate(nextProps) {\n    //prevents useless rerenders when user fidgets with radius slider\n    if (nextProps.radius !== this.props.radius) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Map, {\n      google: this.props.google,\n      zoom: 12,\n      style: {\n        width: \"65.8%\",\n        height: \"97%\"\n      },\n      initialCenter: {\n        lat: this.props.currentLocation[0],\n        lng: this.props.currentLocation[1]\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }\n    }, this.displayMarkers(), this.displayPlacesMarkers(), /*#__PURE__*/React.createElement(Marker, {\n      onClick: this.onMarkerClick,\n      key: \"midpoint\",\n      id: \"midpoint\",\n      name: !this.props.coords ? /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 17\n        }\n      }, \"Midpoint\") : /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 19\n        }\n      }, \"Midpoint\"), /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 19\n        }\n      }, this.props.midpoint[0]), /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 19\n        }\n      }, this.props.midpoint[1])),\n      position: {\n        lat: this.props.midpoint[0],\n        lng: this.props.midpoint[1]\n      },\n      pos: {\n        lat: this.props.midpoint[0],\n        lng: this.props.midpoint[1]\n      },\n      icon: {\n        url: \"http://maps.google.com/mapfiles/ms/icons/green-dot.png\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Circle, {\n      radius: parseInt(this.props.radius) * 1.7,\n      center: {\n        lat: this.state.circleLat,\n        lng: this.state.circleLng\n      },\n      strokeColor: \"transparent\",\n      strokeOpacity: 0,\n      strokeWeight: 5,\n      fillColor: \"#FF0000\",\n      fillOpacity: 0.2,\n      visible: Boolean(this.props.nearbyPlaces),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(InfoWindow, {\n      marker: this.state.activeMarker,\n      visible: this.state.showingInfoWindow,\n      onClose: this.onClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 13\n      }\n    }, this.state.selectedPlace.name, this.state.activeMarker.id === \"place\" ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: this.state.activeMarker.photo,\n      alt: \"Image Unavailable\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 19\n      }\n    }, \"Rating: \", this.state.activeMarker.rating)) : \"\"))));\n  }\n\n}\nexport default GoogleApiWrapper({\n  apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n})(MapContainer);","map":{"version":3,"sources":["C:/Users/Alex/linq-up/src/components/Map.jsx"],"names":["React","Component","Map","Marker","GoogleApiWrapper","InfoWindow","Circle","require","config","MapContainer","state","showingInfoWindow","activeMarker","selectedPlace","currentPhoto","circleLat","props","circleLng","displayMarkers","coords","map","address","index","onMarkerClick","addresses","lat","lng","displayPlacesMarkers","coordsPlaces","placesNames","ratings","photos","i","nearbyPlaces","length","push","geometry","location","name","rating","photo_reference","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","url","marker","setState","onSetMeetupPoint","pos","cleanName","onSetMeetName","onClose","midpoint","componentDidUpdate","prevProps","shouldComponentUpdate","nextProps","radius","render","google","width","height","currentLocation","parseInt","Boolean","id","photo","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Map,\r\n  Marker,\r\n  GoogleApiWrapper,\r\n  InfoWindow,\r\n  Circle,\r\n} from \"google-maps-react\";\r\nrequire(\"dotenv\").config();\r\n\r\nexport class MapContainer extends Component {\r\n\r\n  state = {\r\n    showingInfoWindow: false,\r\n    activeMarker: {},\r\n    selectedPlace: {},\r\n    currentPhoto: \"\",\r\n    circleLat: this.props.circleLat,\r\n    circleLng: this.props.circleLng,\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.circleLat !== this.state.circleLat) {\r\n      this.setState({circleLat: this.props.circleLat,circleLng:this.props.circleLng})\r\n    }\r\n  }\r\n\r\n  displayMarkers = () => {\r\n    return this.props.coords.map((address, index) => {\r\n      return (\r\n        <Marker\r\n          onClick={this.onMarkerClick}\r\n          key={index}\r\n          id={index}\r\n          name={<h4>{this.props.addresses[index]}</h4>}\r\n          pos={{\r\n            lat: address.lat,\r\n            lng: address.lng,\r\n          }}\r\n          position={{\r\n            lat: address.lat,\r\n            lng: address.lng,\r\n          }}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  displayPlacesMarkers = () => {\r\n    let coordsPlaces = [];\r\n    let placesNames = [];\r\n    let ratings = [];\r\n    let photos = [];\r\n\r\n    for (let i = 0; i < this.props.nearbyPlaces.length; i++) {\r\n      coordsPlaces.push(this.props.nearbyPlaces[i].geometry.location);\r\n      placesNames.push(this.props.nearbyPlaces[i].name);\r\n      ratings.push(this.props.nearbyPlaces[i].rating);\r\n\r\n      //if this.props.nearbyPlaces.photos[0]\r\n\r\n\r\n      //handles no photo error\r\n      if (this.props.nearbyPlaces[i].photos) {\r\n        photos.push(\r\n          \"https://maps.googleapis.com/maps/api/place/photo?maxwidth=200&maxheight=200&photoreference=\" +\r\n            this.props.nearbyPlaces[i].photos[0].photo_reference +\r\n            \"&key=\" +\r\n            process.env.REACT_APP_GOOGLE_MAPS_API_KEY\r\n        );\r\n      } else {\r\n        photos.push(\"https://static.thenounproject.com/png/1339059-200.png\");\r\n      }\r\n    }\r\n\r\n    return coordsPlaces.map((address, index) => {\r\n      return (\r\n        <Marker\r\n          onClick={this.onMarkerClick}\r\n          photo={photos[index]}\r\n          key={\"p\" + index}\r\n          id={\"place\"}\r\n          rating={ratings[index]}\r\n          name={<h4>{placesNames[index]}</h4>}\r\n          cleanName={placesNames[index]}\r\n          position={{\r\n            lat: address.lat,\r\n            lng: address.lng,\r\n          }}\r\n          pos={{\r\n            lat: address.lat,\r\n            lng: address.lng,\r\n          }}\r\n          icon={{\r\n            url: \"http://maps.google.com/mapfiles/ms/icons/ltblue-dot.png\",\r\n          }}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  onMarkerClick = (props, marker) => {\r\n    this.setState({\r\n      selectedPlace: props,\r\n      activeMarker: marker,\r\n      showingInfoWindow: true,\r\n    });\r\n    this.props.onSetMeetupPoint(this.state.activeMarker.pos);\r\n\r\n    if (this.state.activeMarker.cleanName) {\r\n      this.props.onSetMeetName(this.state.activeMarker.cleanName);\r\n    }\r\n  };\r\n\r\n  onClose = (props) => {\r\n    if (this.state.showingInfoWindow) {\r\n      this.setState({\r\n        showingInfoWindow: false,\r\n      });\r\n      this.props.onSetMeetupPoint({\r\n        lat: this.props.midpoint[0],\r\n        lng: this.props.midpoint[1],\r\n      });\r\n      this.props.onSetMeetName(\"\");\r\n    }\r\n  };\r\n\r\n  shouldComponentUpdate(nextProps) {\r\n    //prevents useless rerenders when user fidgets with radius slider\r\n\r\n    if (nextProps.radius !== this.props.radius) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Map\r\n          google={this.props.google}\r\n          zoom={12}\r\n          style={{\r\n            width: \"65.8%\",\r\n            height: \"97%\",\r\n          }}\r\n          initialCenter={{\r\n            lat: this.props.currentLocation[0],\r\n            lng: this.props.currentLocation[1],\r\n          }}\r\n        >\r\n          {this.displayMarkers()}\r\n          {this.displayPlacesMarkers()}\r\n          <Marker\r\n            onClick={this.onMarkerClick}\r\n            key=\"midpoint\"\r\n            id=\"midpoint\"\r\n            name={\r\n              !this.props.coords ? (\r\n                <h4>Midpoint</h4>\r\n              ) : (\r\n                <div>\r\n                  <h4>Midpoint</h4>\r\n                  <h4>{this.props.midpoint[0]}</h4>\r\n                  <h4>{this.props.midpoint[1]}</h4>\r\n                </div>\r\n              )\r\n            }\r\n            position={{\r\n              lat: this.props.midpoint[0],\r\n              lng: this.props.midpoint[1],\r\n            }}\r\n            pos={{\r\n              lat: this.props.midpoint[0],\r\n              lng: this.props.midpoint[1],\r\n            }}\r\n            icon={{\r\n              url: \"http://maps.google.com/mapfiles/ms/icons/green-dot.png\",\r\n            }}\r\n          ></Marker>\r\n\r\n          <Circle\r\n            radius={parseInt(this.props.radius) * 1.7}\r\n            center={{\r\n              lat: this.state.circleLat,\r\n              lng: this.state.circleLng,\r\n            }}\r\n            strokeColor=\"transparent\"\r\n            strokeOpacity={0}\r\n            strokeWeight={5}\r\n            fillColor=\"#FF0000\"\r\n            fillOpacity={0.2}\r\n            visible={Boolean(this.props.nearbyPlaces)}\r\n          ></Circle>\r\n\r\n          <InfoWindow\r\n            marker={this.state.activeMarker}\r\n            visible={this.state.showingInfoWindow}\r\n            onClose={this.onClose}\r\n          >\r\n            <div>\r\n              {this.state.selectedPlace.name}\r\n              {this.state.activeMarker.id === \"place\" ? (\r\n                <div>\r\n                  <img src={this.state.activeMarker.photo} alt=\"Image Unavailable\"></img>\r\n                  <h4>Rating: {this.state.activeMarker.rating}</h4>\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n            </div>\r\n          </InfoWindow>\r\n        </Map>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n})(MapContainer);\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}