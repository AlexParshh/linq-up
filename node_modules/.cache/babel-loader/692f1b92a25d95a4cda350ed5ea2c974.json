{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\linq-up\\\\src\\\\components\\\\Application.jsx\";\nimport React, { Component } from \"react\";\nimport PersonList from \"./PersonList\";\nimport Person from \"./Person\";\nimport fetch from \"cross-fetch\";\nimport MapContainer from \"./Map\";\nimport PlacePicker from \"./PlacePicker\";\nimport DirectionsPicker from \"./DirectionsPicker\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Moment from 'moment';\n\nclass Application extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      apiKey: \"&key=AIzaSyAF6LzDWnCO0yQ3_xVfXMYicN6MqUFl4q0\",\n      people: [/*#__PURE__*/React.createElement(Person, {\n        key: \"1\",\n        value: \"1\",\n        onSetAddress: (e, v) => this.handleSetAddress(e, v),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 7\n        }\n      }), /*#__PURE__*/React.createElement(Person, {\n        key: \"2\",\n        value: \"2\",\n        onSetAddress: (e, v) => this.handleSetAddress(e, v),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 7\n        }\n      }), /*#__PURE__*/React.createElement(Person, {\n        key: \"3\",\n        value: \"3\",\n        onSetAddress: (e, v) => this.handleSetAddress(e, v),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 7\n        }\n      })],\n      addresses: [\"\", \"\", \"\"],\n      coords: [],\n      midPoint: \"\",\n      currentLocation: [],\n      POI: \"\",\n      radius: \"300\",\n      nearbyPlaces: {},\n      transportOption: null,\n      date: new Date(),\n      meetupPoint: null\n    };\n\n    this.handleSetAddress = (e, v) => {\n      let newAddresses = this.state.addresses.slice();\n      newAddresses[v - 1] = e;\n      this.setState({\n        addresses: newAddresses\n      });\n    };\n\n    this.emptyChecker = () => {\n      const a = this.state.addresses;\n\n      for (let i of a) {\n        if (i === \"\") {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.handleAddPerson = () => {\n      this.resetMidPoint();\n      let newAddresses = [...this.state.addresses, \"\"];\n      this.setState({\n        addresses: newAddresses\n      });\n      this.setState({\n        people: [...this.state.people, /*#__PURE__*/React.createElement(Person, {\n          key: this.state.people.length + 1,\n          value: this.state.people.length + 1,\n          onSetAddress: (e, v) => this.handleSetAddress(e, v),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 9\n          }\n        })]\n      });\n    };\n\n    this.handleDeletePerson = () => {\n      let newcoords = this.state.coords.slice(0, -1);\n      this.setState({\n        coords: newcoords\n      });\n      this.resetMidPoint();\n      let newAddresses = this.state.addresses.slice(0, -1);\n      this.setState({\n        addresses: newAddresses\n      });\n      let people = this.state.people.slice(0, -1);\n      this.setState({\n        people: people\n      });\n    };\n\n    this.stringParser = a => {\n      let b = a.split(\" \");\n      let newString = \"\";\n\n      for (let i = 0; i < b.length; i++) {\n        newString += b[i] + \"%20\";\n      }\n\n      return newString.slice(0, -3);\n    };\n\n    this.convertToCoords = async () => {\n      const all = this.state.addresses;\n      const url = \"https://maps.googleapis.com/maps/api/geocode/json?address=\";\n      const apiKey = this.state.apiKey;\n      let fullUrl;\n      let newCoords = [];\n      let a;\n\n      for (let i = 0; i < all.length; i++) {\n        fullUrl = url + all[i] + apiKey;\n        a = await this.getCoords(fullUrl);\n        newCoords.push(a);\n      }\n\n      this.setState({\n        coords: newCoords\n      });\n    };\n\n    this.findMidPoint = coordsList => {\n      if (coordsList.length === 2) {\n        let lat1 = coordsList[0].lat * (Math.PI / 180);\n        let lat2 = coordsList[1].lat * (Math.PI / 180);\n        let lon1 = coordsList[0].lng * (Math.PI / 180);\n        let lon2 = coordsList[1].lng * (Math.PI / 180);\n        let bx = Math.cos(lat2) * Math.cos(lon2 - lon1);\n        let by = Math.cos(lat2) * Math.sin(lon2 - lon1);\n        let latMid = Math.atan2(Math.sin(lat1) + Math.sin(lat2), Math.sqrt((Math.cos(lat1) + bx) ** 2) + by ** 2);\n        let lonMid = lon1 + Math.atan2(by, Math.cos(lat1) + bx);\n        return [latMid * (180 / Math.PI), lonMid * (180 / Math.PI)];\n      } //Two or more addresses\n\n\n      const formatter = x => {\n        //Converting from degrees to radians\n        let lat1 = x.lat * (Math.PI / 180);\n        let lon1 = x.lng * (Math.PI / 180); //Converting to cartesian coords\n\n        let x1 = Math.cos(lat1) * Math.cos(lon1);\n        let y1 = Math.cos(lat1) * Math.sin(lon1);\n        let z1 = Math.sin(lat1);\n        return [x1, y1, z1];\n      };\n\n      let formatted = [];\n\n      for (let i of coordsList) {\n        formatted.push(formatter(i));\n      }\n\n      let tmp;\n      let newResult = [];\n\n      for (let i = 0; i < formatted.length; i++) {\n        tmp = 0;\n\n        for (let j of formatted) {\n          tmp += j[i];\n        }\n\n        newResult.push(tmp / formatted.length);\n      } //newResult is now in format[x,y,z]\n\n\n      let lon = Math.atan2(newResult[1], newResult[0]);\n      let hyp = Math.sqrt(newResult[0] ** 2 + newResult[1] ** 2);\n      let lat = Math.atan2(newResult[2], hyp); //converting back to degrees\n\n      lat = lat * (180 / Math.PI);\n      lon = lon * (180 / Math.PI);\n      return [lat, lon];\n    };\n\n    this.calculator = async () => {\n      //check if empty addresses\n      if (this.emptyChecker()) {\n        this.setState({\n          midPoint: \"error\"\n        });\n        return null;\n      }\n\n      if (this.state.addresses.length < 2) {\n        this.setState({\n          midPoint: \"error\"\n        });\n        return null;\n      }\n\n      await this.convertToCoords();\n      let midPoint = await this.findMidPoint(this.state.coords);\n      this.setState({\n        midPoint: midPoint\n      });\n      this.findNearbyPlaces();\n      return this.state.midPoint;\n    };\n\n    this.resetMidPoint = () => {\n      this.setState({\n        midPoint: []\n      });\n    };\n\n    this.setCurrentLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const lattt = position.coords.latitude;\n          const longgg = position.coords.longitude;\n          let newcoords = [lattt, longgg];\n          this.setState({\n            currentLocation: newcoords\n          });\n        });\n      }\n    };\n\n    this.handleSetPOI = e => {\n      this.setState({\n        POI: e\n      });\n    };\n\n    this.getPlaces = () => {\n      if (this.state.POI === \"\") {\n        return null;\n      }\n    };\n\n    this.handleSetRadius = e => {\n      this.setState({\n        radius: e\n      });\n    };\n\n    this.handleSetTransport = e => {\n      this.setState({\n        transportOption: e\n      });\n    };\n\n    this.handleSetDate = date => {\n      this.setState({\n        date\n      });\n    };\n\n    this.handleSetMeetupPoint = loc => {\n      this.setState({\n        meetupPoint: loc\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setCurrentLocation();\n  }\n\n  async getCoords(link) {\n    const res = await fetch(link);\n    const data = await res.json();\n    return data[\"results\"][0].geometry.location;\n  }\n\n  async findNearbyPlaces() {\n    let link = \"https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=\" + this.state.midPoint[0] + \",\" + this.state.midPoint[1] + \"&radius=\" + this.state.radius + \"&keyword=\" + this.state.POI + \"&name&rating\" + this.state.apiKey;\n    let res = await fetch(link);\n    let data = await res.json();\n    this.setState({\n      nearbyPlaces: data.results\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }\n    }, \"Linq\"), /*#__PURE__*/React.createElement(\"button\", {\n      style: {\n        visibilit: hidden\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(PlacePicker, {\n      onSetRadius: e => this.handleSetRadius(e),\n      onSetPOI: e => this.handleSetPOI(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(DirectionsPicker, {\n      onSetTransport: e => this.handleSetTransport(e),\n      onSetDate: date => this.handleSetDate(date),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(PersonList, {\n      people: this.state.people,\n      onAddPerson: () => this.handleAddPerson(),\n      onDeletePerson: () => this.handleDeletePerson(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.calculator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 11\n      }\n    }, \"Calculate\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }\n    }, this.state.midPoint), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(MapContainer, {\n      POI: this.state.POI,\n      addresses: this.state.addresses,\n      currentLocation: this.state.currentLocation,\n      coords: this.state.coords,\n      midpoint: this.state.midPoint,\n      radius: this.state.radius,\n      nearbyPlaces: this.state.nearbyPlaces,\n      apiKey: this.state.apiKey,\n      onSetMeetupPoint: loc => this.handleSetMeetupPoint(loc),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default Application;","map":{"version":3,"sources":["C:/Users/Alex/linq-up/src/components/Application.jsx"],"names":["React","Component","PersonList","Person","fetch","MapContainer","PlacePicker","DirectionsPicker","Moment","Application","state","apiKey","people","e","v","handleSetAddress","addresses","coords","midPoint","currentLocation","POI","radius","nearbyPlaces","transportOption","date","Date","meetupPoint","newAddresses","slice","setState","emptyChecker","a","i","handleAddPerson","resetMidPoint","length","handleDeletePerson","newcoords","stringParser","b","split","newString","convertToCoords","all","url","fullUrl","newCoords","getCoords","push","findMidPoint","coordsList","lat1","lat","Math","PI","lat2","lon1","lng","lon2","bx","cos","by","sin","latMid","atan2","sqrt","lonMid","formatter","x","x1","y1","z1","formatted","tmp","newResult","j","lon","hyp","calculator","findNearbyPlaces","setCurrentLocation","navigator","geolocation","getCurrentPosition","position","lattt","latitude","longgg","longitude","handleSetPOI","getPlaces","handleSetRadius","handleSetTransport","handleSetDate","handleSetMeetupPoint","loc","componentDidMount","link","res","data","json","geometry","location","results","render","visibilit","hidden"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport PersonList from \"./PersonList\";\r\nimport Person from \"./Person\";\r\nimport fetch from \"cross-fetch\";\r\nimport MapContainer from \"./Map\";\r\nimport PlacePicker from \"./PlacePicker\";\r\nimport DirectionsPicker from \"./DirectionsPicker\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport Moment from 'moment';\r\n\r\n\r\nclass Application extends Component {\r\n  state = {\r\n    apiKey: \"&key=AIzaSyAF6LzDWnCO0yQ3_xVfXMYicN6MqUFl4q0\",\r\n\r\n    people: [\r\n      <Person\r\n        key=\"1\"\r\n        value=\"1\"\r\n        onSetAddress={(e, v) => this.handleSetAddress(e, v)}\r\n      ></Person>,\r\n      <Person\r\n        key=\"2\"\r\n        value=\"2\"\r\n        onSetAddress={(e, v) => this.handleSetAddress(e, v)}\r\n      ></Person>,\r\n      <Person\r\n        key=\"3\"\r\n        value=\"3\"\r\n        onSetAddress={(e, v) => this.handleSetAddress(e, v)}\r\n      ></Person>,\r\n    ],\r\n    addresses: [\"\", \"\", \"\"],\r\n\r\n    coords: [],\r\n\r\n    midPoint: \"\",\r\n\r\n    currentLocation: [],\r\n\r\n    POI: \"\",\r\n\r\n    radius: \"300\",\r\n\r\n    nearbyPlaces: {},\r\n\r\n    transportOption: null,\r\n\r\n    date: new Date(),\r\n\r\n    meetupPoint: null,\r\n\r\n\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setCurrentLocation();\r\n  }\r\n\r\n  handleSetAddress = (e, v) => {\r\n    let newAddresses = this.state.addresses.slice();\r\n    newAddresses[v - 1] = e;\r\n    this.setState({ addresses: newAddresses });\r\n  };\r\n\r\n  emptyChecker = () => {\r\n    const a = this.state.addresses;\r\n\r\n    for (let i of a) {\r\n      if (i === \"\") {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  handleAddPerson = () => {\r\n    this.resetMidPoint();\r\n    let newAddresses = [...this.state.addresses, \"\"];\r\n    this.setState({ addresses: newAddresses });\r\n    this.setState({\r\n      people: [\r\n        ...this.state.people,\r\n        <Person\r\n          key={this.state.people.length + 1}\r\n          value={this.state.people.length + 1}\r\n          onSetAddress={(e, v) => this.handleSetAddress(e, v)}\r\n        ></Person>,\r\n      ],\r\n    });\r\n  };\r\n\r\n  handleDeletePerson = () => {\r\n    let newcoords = this.state.coords.slice(0, -1);\r\n    this.setState({ coords: newcoords });\r\n\r\n    this.resetMidPoint();\r\n    let newAddresses = this.state.addresses.slice(0, -1);\r\n    this.setState({ addresses: newAddresses });\r\n    let people = this.state.people.slice(0, -1);\r\n    this.setState({\r\n      people: people,\r\n    });\r\n  };\r\n\r\n  stringParser = (a) => {\r\n    let b = a.split(\" \");\r\n    let newString = \"\";\r\n\r\n    for (let i = 0; i < b.length; i++) {\r\n      newString += b[i] + \"%20\";\r\n    }\r\n\r\n    return newString.slice(0, -3);\r\n  };\r\n\r\n  async getCoords(link) {\r\n    const res = await fetch(link);\r\n    const data = await res.json();\r\n\r\n    return data[\"results\"][0].geometry.location;\r\n  }\r\n\r\n  convertToCoords = async () => {\r\n    const all = this.state.addresses;\r\n    const url = \"https://maps.googleapis.com/maps/api/geocode/json?address=\";\r\n    const apiKey = this.state.apiKey;\r\n\r\n    let fullUrl;\r\n\r\n    let newCoords = [];\r\n    let a;\r\n\r\n    for (let i = 0; i < all.length; i++) {\r\n      fullUrl = url + all[i] + apiKey;\r\n      a = await this.getCoords(fullUrl);\r\n      newCoords.push(a);\r\n    }\r\n\r\n    this.setState({ coords: newCoords });\r\n  };\r\n\r\n  findMidPoint = (coordsList) => {\r\n    if (coordsList.length === 2) {\r\n      let lat1 = coordsList[0].lat * (Math.PI / 180);\r\n      let lat2 = coordsList[1].lat * (Math.PI / 180);\r\n      let lon1 = coordsList[0].lng * (Math.PI / 180);\r\n      let lon2 = coordsList[1].lng * (Math.PI / 180);\r\n\r\n      let bx = Math.cos(lat2) * Math.cos(lon2 - lon1);\r\n      let by = Math.cos(lat2) * Math.sin(lon2 - lon1);\r\n\r\n      let latMid = Math.atan2(\r\n        Math.sin(lat1) + Math.sin(lat2),\r\n        Math.sqrt((Math.cos(lat1) + bx) ** 2) + by ** 2\r\n      );\r\n      let lonMid = lon1 + Math.atan2(by, Math.cos(lat1) + bx);\r\n\r\n      return [latMid * (180 / Math.PI), lonMid * (180 / Math.PI)];\r\n    }\r\n\r\n    //Two or more addresses\r\n\r\n    const formatter = (x) => {\r\n      //Converting from degrees to radians\r\n      let lat1 = x.lat * (Math.PI / 180);\r\n      let lon1 = x.lng * (Math.PI / 180);\r\n      //Converting to cartesian coords\r\n\r\n      let x1 = Math.cos(lat1) * Math.cos(lon1);\r\n      let y1 = Math.cos(lat1) * Math.sin(lon1);\r\n      let z1 = Math.sin(lat1);\r\n\r\n      return [x1, y1, z1];\r\n    };\r\n\r\n    let formatted = [];\r\n\r\n    for (let i of coordsList) {\r\n      formatted.push(formatter(i));\r\n    }\r\n\r\n    let tmp;\r\n    let newResult = [];\r\n\r\n    for (let i = 0; i < formatted.length; i++) {\r\n      tmp = 0;\r\n      for (let j of formatted) {\r\n        tmp += j[i];\r\n      }\r\n\r\n      newResult.push(tmp / formatted.length);\r\n    }\r\n\r\n    //newResult is now in format[x,y,z]\r\n\r\n    let lon = Math.atan2(newResult[1], newResult[0]);\r\n    let hyp = Math.sqrt(newResult[0] ** 2 + newResult[1] ** 2);\r\n    let lat = Math.atan2(newResult[2], hyp);\r\n\r\n    //converting back to degrees\r\n    lat = lat * (180 / Math.PI);\r\n    lon = lon * (180 / Math.PI);\r\n\r\n    return [lat, lon];\r\n  };\r\n\r\n  calculator = async () => {\r\n    //check if empty addresses\r\n    if (this.emptyChecker()) {\r\n      this.setState({ midPoint: \"error\" });\r\n      return null;\r\n    }\r\n\r\n    if (this.state.addresses.length < 2) {\r\n      this.setState({ midPoint: \"error\" });\r\n      return null;\r\n    }\r\n    await this.convertToCoords();\r\n    let midPoint = await this.findMidPoint(this.state.coords);\r\n    this.setState({ midPoint: midPoint });\r\n\r\n    this.findNearbyPlaces();\r\n    return this.state.midPoint;\r\n  };\r\n\r\n  resetMidPoint = () => {\r\n    this.setState({ midPoint: [] });\r\n  };\r\n\r\n  setCurrentLocation = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        const lattt = position.coords.latitude;\r\n        const longgg = position.coords.longitude;\r\n\r\n        let newcoords = [lattt, longgg];\r\n\r\n        this.setState({ currentLocation: newcoords });\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n  handleSetPOI = (e) => {\r\n    this.setState({ POI: e });\r\n  };\r\n\r\n  getPlaces = () => {\r\n\r\n    if (this.state.POI === \"\") {\r\n      return null;\r\n    } \r\n\r\n  }\r\n\r\n  handleSetRadius = (e) => {\r\n\r\n    this.setState({radius:e});\r\n  }\r\n\r\n\r\n  \r\n  async findNearbyPlaces() {\r\n    let link = \"https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=\"+this.state.midPoint[0]+\",\"+this.state.midPoint[1]+\"&radius=\"+this.state.radius+\"&keyword=\"+this.state.POI+\"&name&rating\"+this.state.apiKey;\r\n    let res = await fetch(link);\r\n    let data = await res.json();\r\n\r\n    this.setState({nearbyPlaces: data.results});\r\n\r\n  }\r\n\r\n  handleSetTransport = (e) => {\r\n    this.setState({transportOption:e})\r\n  }\r\n\r\n  handleSetDate = (date) => {\r\n    this.setState({date})\r\n  }\r\n\r\n  handleSetMeetupPoint = (loc) => {\r\n    this.setState({meetupPoint:loc})\r\n  }\r\n  \r\n\r\n\r\n  render() {\r\n\r\n    \r\n    return (\r\n      <div>\r\n        <h1>Linq</h1>\r\n\r\n        <button style={{visibilit:hidden}}></button>\r\n\r\n        <div>\r\n          <PlacePicker \r\n          onSetRadius={(e) => this.handleSetRadius(e)}\r\n          onSetPOI={(e) => this.handleSetPOI(e)}></PlacePicker>\r\n        </div>\r\n        <br />\r\n\r\n        <div>\r\n          <DirectionsPicker\r\n          onSetTransport={(e) => this.handleSetTransport(e)}\r\n          onSetDate = {(date) => this.handleSetDate(date)}\r\n          ></DirectionsPicker>\r\n        </div>\r\n\r\n        <br/>\r\n        <div>\r\n          <PersonList\r\n            people={this.state.people}\r\n            onAddPerson={() => this.handleAddPerson()}\r\n            onDeletePerson={() => this.handleDeletePerson()}\r\n          ></PersonList>\r\n        </div>\r\n\r\n        <div>\r\n          <button onClick={this.calculator}>Calculate</button>\r\n        </div>\r\n        <br />\r\n        <div>{this.state.midPoint}</div>\r\n\r\n        <div>\r\n          <MapContainer\r\n            POI={this.state.POI}\r\n            addresses={this.state.addresses}\r\n            currentLocation={this.state.currentLocation}\r\n            coords={this.state.coords}\r\n            midpoint={this.state.midPoint}\r\n            radius={this.state.radius}\r\n            nearbyPlaces={this.state.nearbyPlaces}\r\n            apiKey={this.state.apiKey}\r\n            onSetMeetupPoint={(loc) => this.handleSetMeetupPoint(loc)}\r\n          ></MapContainer>\r\n        </div>\r\n\r\n\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Application;"]},"metadata":{},"sourceType":"module"}