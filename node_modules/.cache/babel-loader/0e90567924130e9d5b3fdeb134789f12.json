{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\linq-up\\\\src\\\\components\\\\Application.jsx\";\nimport React, { Component } from \"react\";\nimport PersonList from \"./PersonList\";\nimport Person from \"./Person\";\nimport fetch from \"cross-fetch\";\nimport MapContainer from \"./Map\";\nimport PlacePicker from \"./PlacePicker\";\nimport DirectionsPicker from \"./DirectionsPicker\";\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst moment = require('moment');\n\nclass Application extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      apiKey: \"&key=AIzaSyAF6LzDWnCO0yQ3_xVfXMYicN6MqUFl4q0\",\n      people: [/*#__PURE__*/React.createElement(Person, {\n        key: \"1\",\n        value: \"1\",\n        onSetAddress: (e, v) => this.handleSetAddress(e, v),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 7\n        }\n      }), /*#__PURE__*/React.createElement(Person, {\n        key: \"2\",\n        value: \"2\",\n        onSetAddress: (e, v) => this.handleSetAddress(e, v),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 7\n        }\n      }), /*#__PURE__*/React.createElement(Person, {\n        key: \"3\",\n        value: \"3\",\n        onSetAddress: (e, v) => this.handleSetAddress(e, v),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 7\n        }\n      })],\n      addresses: [\"\", \"\", \"\"],\n      coords: [],\n      midPoint: \"\",\n      currentLocation: [],\n      POI: \"\",\n      radius: \"300\",\n      nearbyPlaces: {},\n      transportOption: null,\n      date: new Date(),\n      meetupPoint: null,\n      travelTimes: [],\n      leaveTimes: []\n    };\n\n    this.handleSetAddress = (e, v) => {\n      let newAddresses = this.state.addresses.slice();\n      newAddresses[v - 1] = e;\n      this.setState({\n        addresses: newAddresses\n      });\n    };\n\n    this.emptyChecker = () => {\n      const a = this.state.addresses;\n\n      for (let i of a) {\n        if (i === \"\") {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.handleAddPerson = () => {\n      this.resetMidPoint();\n      let newAddresses = [...this.state.addresses, \"\"];\n      this.setState({\n        addresses: newAddresses,\n        leaveTimes: [],\n        meetupPoint: null,\n        travelTimes: [],\n        nearbyPlaces: {}\n      });\n      this.setState({\n        people: [...this.state.people, /*#__PURE__*/React.createElement(Person, {\n          key: this.state.people.length + 1,\n          value: this.state.people.length + 1,\n          onSetAddress: (e, v) => this.handleSetAddress(e, v),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 9\n          }\n        })]\n      });\n    };\n\n    this.handleDeletePerson = () => {\n      let newcoords = this.state.coords.slice(0, -1);\n      this.setState({\n        coords: newcoords,\n        leaveTimes: [],\n        meetupPoint: null,\n        travelTimes: [],\n        nearbyPlaces: {}\n      });\n      this.resetMidPoint();\n      let newAddresses = this.state.addresses.slice(0, -1);\n      this.setState({\n        addresses: newAddresses\n      });\n      let people = this.state.people.slice(0, -1);\n      this.setState({\n        people: people\n      });\n    };\n\n    this.stringParser = a => {\n      let b = a.split(\" \");\n      let newString = \"\";\n\n      for (let i = 0; i < b.length; i++) {\n        newString += b[i] + \"%20\";\n      }\n\n      return newString.slice(0, -3);\n    };\n\n    this.convertToCoords = async () => {\n      const all = this.state.addresses;\n      const url = \"https://maps.googleapis.com/maps/api/geocode/json?address=\";\n      const apiKey = this.state.apiKey;\n      let fullUrl;\n      let newCoords = [];\n      let a;\n\n      for (let i = 0; i < all.length; i++) {\n        fullUrl = url + all[i] + apiKey;\n        a = await this.getCoords(fullUrl);\n        newCoords.push(a);\n      }\n\n      this.setState({\n        coords: newCoords\n      });\n    };\n\n    this.findMidPoint = coordsList => {\n      if (coordsList.length === 2) {\n        let lat1 = coordsList[0].lat * (Math.PI / 180);\n        let lat2 = coordsList[1].lat * (Math.PI / 180);\n        let lon1 = coordsList[0].lng * (Math.PI / 180);\n        let lon2 = coordsList[1].lng * (Math.PI / 180);\n        let bx = Math.cos(lat2) * Math.cos(lon2 - lon1);\n        let by = Math.cos(lat2) * Math.sin(lon2 - lon1);\n        let latMid = Math.atan2(Math.sin(lat1) + Math.sin(lat2), Math.sqrt((Math.cos(lat1) + bx) ** 2) + by ** 2);\n        let lonMid = lon1 + Math.atan2(by, Math.cos(lat1) + bx);\n        return [latMid * (180 / Math.PI), lonMid * (180 / Math.PI)];\n      } //Two or more addresses\n\n\n      const formatter = x => {\n        //Converting from degrees to radians\n        let lat1 = x.lat * (Math.PI / 180);\n        let lon1 = x.lng * (Math.PI / 180); //Converting to cartesian coords\n\n        let x1 = Math.cos(lat1) * Math.cos(lon1);\n        let y1 = Math.cos(lat1) * Math.sin(lon1);\n        let z1 = Math.sin(lat1);\n        return [x1, y1, z1];\n      };\n\n      let formatted = [];\n\n      for (let i of coordsList) {\n        formatted.push(formatter(i));\n      }\n\n      let tmp;\n      let newResult = [];\n\n      for (let i = 0; i < formatted.length; i++) {\n        tmp = 0;\n\n        for (let j of formatted) {\n          tmp += j[i];\n        }\n\n        newResult.push(tmp / formatted.length);\n      } //newResult is now in format[x,y,z]\n\n\n      let lon = Math.atan2(newResult[1], newResult[0]);\n      let hyp = Math.sqrt(newResult[0] ** 2 + newResult[1] ** 2);\n      let lat = Math.atan2(newResult[2], hyp); //converting back to degrees\n\n      lat = lat * (180 / Math.PI);\n      lon = lon * (180 / Math.PI);\n      return [lat, lon];\n    };\n\n    this.calculator = async () => {\n      //check if empty addresses\n      if (this.emptyChecker()) {\n        this.setState({\n          midPoint: \"error\"\n        });\n        return null;\n      }\n\n      if (this.state.addresses.length < 2) {\n        this.setState({\n          midPoint: \"error\"\n        });\n        return null;\n      }\n\n      await this.convertToCoords();\n      let midPoint = await this.findMidPoint(this.state.coords);\n      this.setState({\n        midPoint: midPoint\n      });\n      this.findNearbyPlaces();\n      return this.state.midPoint;\n    };\n\n    this.resetMidPoint = () => {\n      this.setState({\n        midPoint: []\n      });\n    };\n\n    this.setCurrentLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const lattt = position.coords.latitude;\n          const longgg = position.coords.longitude;\n          let newcoords = [lattt, longgg];\n          this.setState({\n            currentLocation: newcoords\n          });\n        });\n      }\n    };\n\n    this.handleSetPOI = e => {\n      this.setState({\n        POI: e\n      });\n    };\n\n    this.getPlaces = () => {\n      if (this.state.POI === \"\") {\n        return null;\n      }\n    };\n\n    this.handleSetRadius = e => {\n      this.setState({\n        radius: e\n      });\n    };\n\n    this.handleSetTransport = e => {\n      let l;\n\n      if (e == \"bike\") {\n        l = \"bicycling\";\n      } else if (e == \"car\") {\n        l = \"driving\";\n      } else if (e == \"walk\") {\n        l = \"walking\";\n      } else {\n        l = \"transit\";\n      }\n\n      this.setState({\n        transportOption: l\n      });\n    };\n\n    this.handleSetDate = date => {\n      this.setState({\n        date\n      });\n    };\n\n    this.handleSetMeetupPoint = loc => {\n      this.setState({\n        meetupPoint: loc\n      });\n    };\n\n    this.getTravelTimes = async () => {\n      let targetLat = this.state.meetupPoint.lat;\n      let targetLon = this.state.meetupPoint.lng;\n      let travelTimes = [];\n      let originLat, originLon, link, time;\n      if (this.state.transportOption) for (let i = 0; i < this.state.coords.length; i++) {\n        originLat = this.state.coords[i].lat;\n        originLon = this.state.coords[i].lng;\n        link = \"https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/directions/json?origin=\" + originLat + \",\" + originLon + \"&destination=\" + targetLat + \",\" + targetLon + \"&mode=\" + this.state.transportOption + this.state.apiKey;\n        time = await this.getTime(link);\n        travelTimes.push(time);\n      }\n      this.setState({\n        travelTimes\n      });\n      this.getLeaveTimes();\n    };\n\n    this.getLeaveTimes = () => {\n      let travelTimes = this.state.travelTimes;\n      let arrivalTime = moment(this.state.date);\n      let leaveTimes = [];\n      let current;\n\n      for (let i = 0; i < travelTimes.length; i++) {\n        current = arrivalTime.clone().subtract(travelTimes[i].value, \"seconds\");\n        current = current.format(\"LLL\");\n        leaveTimes.push(current);\n      }\n\n      this.setState({\n        leaveTimes\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setCurrentLocation();\n  }\n\n  async getCoords(link) {\n    const res = await fetch(link);\n    const data = await res.json();\n    return data[\"results\"][0].geometry.location;\n  }\n\n  async findNearbyPlaces() {\n    let link = \"https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=\" + this.state.midPoint[0] + \",\" + this.state.midPoint[1] + \"&radius=\" + this.state.radius + \"&keyword=\" + this.state.POI + \"&name&rating\" + this.state.apiKey;\n    let res = await fetch(link);\n    let data = await res.json(); //if no nearby places were found\n\n    if (data.status === \"ZERO_RESULTS\") {\n      return;\n    } else {\n      this.setState({\n        nearbyPlaces: data.results\n      });\n    }\n  }\n\n  async getTime(link) {\n    const res = await fetch(link);\n    const data = await res.json();\n    return data.routes[0].legs[0].duration;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }\n    }, \"Linq\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(PlacePicker, {\n      onSetRadius: e => this.handleSetRadius(e),\n      onSetPOI: e => this.handleSetPOI(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(DirectionsPicker, {\n      onSetTransport: e => this.handleSetTransport(e),\n      onSetDate: date => this.handleSetDate(date),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(PersonList, {\n      people: this.state.people,\n      onAddPerson: () => this.handleAddPerson(),\n      onDeletePerson: () => this.handleDeletePerson(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.calculator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 11\n      }\n    }, \"Calculate\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 9\n      }\n    }, this.state.midPoint), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.getTravelTimes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 14\n      }\n    }, \"Linq up!\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(MapContainer, {\n      POI: this.state.POI,\n      addresses: this.state.addresses,\n      currentLocation: this.state.currentLocation,\n      coords: this.state.coords,\n      midpoint: this.state.midPoint,\n      radius: this.state.radius,\n      nearbyPlaces: this.state.nearbyPlaces,\n      apiKey: this.state.apiKey,\n      onSetMeetupPoint: loc => this.handleSetMeetupPoint(loc),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default Application;","map":{"version":3,"sources":["C:/Users/Alex/linq-up/src/components/Application.jsx"],"names":["React","Component","PersonList","Person","fetch","MapContainer","PlacePicker","DirectionsPicker","moment","require","Application","state","apiKey","people","e","v","handleSetAddress","addresses","coords","midPoint","currentLocation","POI","radius","nearbyPlaces","transportOption","date","Date","meetupPoint","travelTimes","leaveTimes","newAddresses","slice","setState","emptyChecker","a","i","handleAddPerson","resetMidPoint","length","handleDeletePerson","newcoords","stringParser","b","split","newString","convertToCoords","all","url","fullUrl","newCoords","getCoords","push","findMidPoint","coordsList","lat1","lat","Math","PI","lat2","lon1","lng","lon2","bx","cos","by","sin","latMid","atan2","sqrt","lonMid","formatter","x","x1","y1","z1","formatted","tmp","newResult","j","lon","hyp","calculator","findNearbyPlaces","setCurrentLocation","navigator","geolocation","getCurrentPosition","position","lattt","latitude","longgg","longitude","handleSetPOI","getPlaces","handleSetRadius","handleSetTransport","l","handleSetDate","handleSetMeetupPoint","loc","getTravelTimes","targetLat","targetLon","originLat","originLon","link","time","getTime","getLeaveTimes","arrivalTime","current","clone","subtract","value","format","componentDidMount","res","data","json","geometry","location","status","results","routes","legs","duration","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport PersonList from \"./PersonList\";\r\nimport Person from \"./Person\";\r\nimport fetch from \"cross-fetch\";\r\nimport MapContainer from \"./Map\";\r\nimport PlacePicker from \"./PlacePicker\";\r\nimport DirectionsPicker from \"./DirectionsPicker\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nconst moment = require('moment');\r\n\r\nclass Application extends Component {\r\n  state = {\r\n    apiKey: \"&key=AIzaSyAF6LzDWnCO0yQ3_xVfXMYicN6MqUFl4q0\",\r\n\r\n    people: [\r\n      <Person\r\n        key=\"1\"\r\n        value=\"1\"\r\n        onSetAddress={(e, v) => this.handleSetAddress(e, v)}\r\n      ></Person>,\r\n      <Person\r\n        key=\"2\"\r\n        value=\"2\"\r\n        onSetAddress={(e, v) => this.handleSetAddress(e, v)}\r\n      ></Person>,\r\n      <Person\r\n        key=\"3\"\r\n        value=\"3\"\r\n        onSetAddress={(e, v) => this.handleSetAddress(e, v)}\r\n      ></Person>,\r\n    ],\r\n    addresses: [\"\", \"\", \"\"],\r\n\r\n    coords: [],\r\n\r\n    midPoint: \"\",\r\n\r\n    currentLocation: [],\r\n\r\n    POI: \"\",\r\n\r\n    radius: \"300\",\r\n\r\n    nearbyPlaces: {},\r\n\r\n    transportOption: null,\r\n\r\n    date: new Date(),\r\n\r\n    meetupPoint: null,\r\n\r\n    travelTimes: [],\r\n\r\n    leaveTimes: [],\r\n\r\n\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setCurrentLocation();\r\n  }\r\n\r\n  handleSetAddress = (e, v) => {\r\n    let newAddresses = this.state.addresses.slice();\r\n    newAddresses[v - 1] = e;\r\n    this.setState({ addresses: newAddresses });\r\n  };\r\n\r\n  emptyChecker = () => {\r\n    const a = this.state.addresses;\r\n\r\n    for (let i of a) {\r\n      if (i === \"\") {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  handleAddPerson = () => {\r\n    this.resetMidPoint();\r\n    let newAddresses = [...this.state.addresses, \"\"];\r\n    this.setState({ addresses: newAddresses,\r\n    leaveTimes: [],\r\n    meetupPoint: null,\r\n    travelTimes: [],\r\n    nearbyPlaces: {}\r\n\r\n   });\r\n    this.setState({\r\n      people: [\r\n        ...this.state.people,\r\n        <Person\r\n          key={this.state.people.length + 1}\r\n          value={this.state.people.length + 1}\r\n          onSetAddress={(e, v) => this.handleSetAddress(e, v)}\r\n        ></Person>,\r\n      ],\r\n    });\r\n  };\r\n\r\n  handleDeletePerson = () => {\r\n    let newcoords = this.state.coords.slice(0, -1);\r\n    this.setState({ coords: newcoords,\r\n      leaveTimes: [],\r\n      meetupPoint: null,\r\n      travelTimes: [],\r\n      nearbyPlaces: {} });\r\n\r\n    this.resetMidPoint();\r\n    let newAddresses = this.state.addresses.slice(0, -1);\r\n    this.setState({ addresses: newAddresses });\r\n    let people = this.state.people.slice(0, -1);\r\n    this.setState({\r\n      people: people,\r\n    });\r\n  };\r\n\r\n  stringParser = (a) => {\r\n    let b = a.split(\" \");\r\n    let newString = \"\";\r\n\r\n    for (let i = 0; i < b.length; i++) {\r\n      newString += b[i] + \"%20\";\r\n    }\r\n\r\n    return newString.slice(0, -3);\r\n  };\r\n\r\n  async getCoords(link) {\r\n    const res = await fetch(link);\r\n    const data = await res.json();\r\n\r\n    return data[\"results\"][0].geometry.location;\r\n  }\r\n\r\n  convertToCoords = async () => {\r\n    const all = this.state.addresses;\r\n    const url = \"https://maps.googleapis.com/maps/api/geocode/json?address=\";\r\n    const apiKey = this.state.apiKey;\r\n\r\n    let fullUrl;\r\n\r\n    let newCoords = [];\r\n    let a;\r\n\r\n    for (let i = 0; i < all.length; i++) {\r\n      fullUrl = url + all[i] + apiKey;\r\n      a = await this.getCoords(fullUrl);\r\n      newCoords.push(a);\r\n    }\r\n\r\n    this.setState({ coords: newCoords });\r\n  };\r\n\r\n  findMidPoint = (coordsList) => {\r\n    if (coordsList.length === 2) {\r\n      let lat1 = coordsList[0].lat * (Math.PI / 180);\r\n      let lat2 = coordsList[1].lat * (Math.PI / 180);\r\n      let lon1 = coordsList[0].lng * (Math.PI / 180);\r\n      let lon2 = coordsList[1].lng * (Math.PI / 180);\r\n\r\n      let bx = Math.cos(lat2) * Math.cos(lon2 - lon1);\r\n      let by = Math.cos(lat2) * Math.sin(lon2 - lon1);\r\n\r\n      let latMid = Math.atan2(\r\n        Math.sin(lat1) + Math.sin(lat2),\r\n        Math.sqrt((Math.cos(lat1) + bx) ** 2) + by ** 2\r\n      );\r\n      let lonMid = lon1 + Math.atan2(by, Math.cos(lat1) + bx);\r\n\r\n      return [latMid * (180 / Math.PI), lonMid * (180 / Math.PI)];\r\n    }\r\n\r\n    //Two or more addresses\r\n\r\n    const formatter = (x) => {\r\n      //Converting from degrees to radians\r\n      let lat1 = x.lat * (Math.PI / 180);\r\n      let lon1 = x.lng * (Math.PI / 180);\r\n      //Converting to cartesian coords\r\n\r\n      let x1 = Math.cos(lat1) * Math.cos(lon1);\r\n      let y1 = Math.cos(lat1) * Math.sin(lon1);\r\n      let z1 = Math.sin(lat1);\r\n\r\n      return [x1, y1, z1];\r\n    };\r\n\r\n    let formatted = [];\r\n\r\n    for (let i of coordsList) {\r\n      formatted.push(formatter(i));\r\n    }\r\n\r\n    let tmp;\r\n    let newResult = [];\r\n\r\n    for (let i = 0; i < formatted.length; i++) {\r\n      tmp = 0;\r\n      for (let j of formatted) {\r\n        tmp += j[i];\r\n      }\r\n\r\n      newResult.push(tmp / formatted.length);\r\n    }\r\n\r\n    //newResult is now in format[x,y,z]\r\n\r\n    let lon = Math.atan2(newResult[1], newResult[0]);\r\n    let hyp = Math.sqrt(newResult[0] ** 2 + newResult[1] ** 2);\r\n    let lat = Math.atan2(newResult[2], hyp);\r\n\r\n    //converting back to degrees\r\n    lat = lat * (180 / Math.PI);\r\n    lon = lon * (180 / Math.PI);\r\n\r\n    return [lat, lon];\r\n  };\r\n\r\n  calculator = async () => {\r\n    //check if empty addresses\r\n    if (this.emptyChecker()) {\r\n      this.setState({ midPoint: \"error\" });\r\n      return null;\r\n    }\r\n\r\n    if (this.state.addresses.length < 2) {\r\n      this.setState({ midPoint: \"error\" });\r\n      return null;\r\n    }\r\n    await this.convertToCoords();\r\n    let midPoint = await this.findMidPoint(this.state.coords);\r\n    this.setState({ midPoint: midPoint });\r\n\r\n    this.findNearbyPlaces();\r\n    return this.state.midPoint;\r\n  };\r\n\r\n  resetMidPoint = () => {\r\n    this.setState({ midPoint: [] });\r\n  };\r\n\r\n  setCurrentLocation = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        const lattt = position.coords.latitude;\r\n        const longgg = position.coords.longitude;\r\n\r\n        let newcoords = [lattt, longgg];\r\n\r\n        this.setState({ currentLocation: newcoords });\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n  handleSetPOI = (e) => {\r\n    this.setState({ POI: e });\r\n  };\r\n\r\n  getPlaces = () => {\r\n\r\n    if (this.state.POI === \"\") {\r\n      return null;\r\n    } \r\n\r\n  }\r\n\r\n  handleSetRadius = (e) => {\r\n\r\n    this.setState({radius:e});\r\n  }\r\n\r\n\r\n  \r\n  async findNearbyPlaces() {\r\n    let link = \"https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=\"+this.state.midPoint[0]+\",\"+this.state.midPoint[1]+\"&radius=\"+this.state.radius+\"&keyword=\"+this.state.POI+\"&name&rating\"+this.state.apiKey;\r\n    let res = await fetch(link);\r\n    let data = await res.json();\r\n\r\n\r\n    //if no nearby places were found\r\n    if (data.status === \"ZERO_RESULTS\") {\r\n      return\r\n    } else {\r\n      this.setState({nearbyPlaces: data.results});\r\n    }\r\n\r\n  }\r\n\r\n  handleSetTransport = (e) => {\r\n    let l;\r\n    if (e ==\"bike\") {\r\n      l = \"bicycling\"\r\n    } else if (e==\"car\") {\r\n      l=\"driving\"\r\n    } else if (e==\"walk\") {\r\n      l=\"walking\"\r\n    } else {\r\n      l = \"transit\"\r\n    }\r\n \r\n\r\n    this.setState({transportOption:l})\r\n  }\r\n\r\n  handleSetDate = (date) => {\r\n    this.setState({date})\r\n  }\r\n\r\n  handleSetMeetupPoint = (loc) => {\r\n    this.setState({meetupPoint:loc})\r\n  }\r\n\r\n  async getTime(link) {\r\n    const res = await fetch(link);\r\n    const data = await res.json();\r\n\r\n    return data.routes[0].legs[0].duration\r\n  }\r\n\r\n  getTravelTimes = async () => {\r\n    let targetLat=this.state.meetupPoint.lat\r\n    let targetLon=this.state.meetupPoint.lng\r\n\r\n\r\n    let travelTimes = [];\r\n\r\n    let originLat, originLon, link, time;\r\n\r\n    if (this.state.transportOption )\r\n\r\n    \r\n    for (let i =0;i<this.state.coords.length;i++){\r\n\r\n      originLat = this.state.coords[i].lat\r\n      originLon = this.state.coords[i].lng\r\n\r\n      link = \"https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/directions/json?origin=\"+originLat+\",\"+originLon+\"&destination=\"+targetLat+\",\"+targetLon+\"&mode=\"+this.state.transportOption+this.state.apiKey;\r\n\r\n      time = await this.getTime(link)\r\n\r\n      travelTimes.push(time)\r\n    }\r\n\r\n\r\n    this.setState({travelTimes})\r\n\r\n    this.getLeaveTimes()\r\n\r\n  }\r\n  \r\n  getLeaveTimes = () => {\r\n\r\n    let travelTimes = this.state.travelTimes;\r\n    let arrivalTime = moment(this.state.date);\r\n    let leaveTimes = [];\r\n\r\n    let current;\r\n\r\n    for (let i =0; i<travelTimes.length;i++) {\r\n      current = arrivalTime.clone().subtract(travelTimes[i].value, \"seconds\");\r\n      current = current.format(\"LLL\")\r\n      leaveTimes.push(current)\r\n\r\n    }\r\n\r\n   \r\n\r\n    this.setState({leaveTimes})\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    \r\n    return (\r\n      <div>\r\n        <h1>Linq</h1>\r\n\r\n\r\n        <div>\r\n          <PlacePicker \r\n          onSetRadius={(e) => this.handleSetRadius(e)}\r\n          onSetPOI={(e) => this.handleSetPOI(e)}></PlacePicker>\r\n        </div>\r\n        <br />\r\n\r\n        <div>\r\n          <DirectionsPicker\r\n          onSetTransport={(e) => this.handleSetTransport(e)}\r\n          onSetDate = {(date) => this.handleSetDate(date)}\r\n          ></DirectionsPicker>\r\n        </div>\r\n        \r\n        <br/>\r\n        <div>\r\n          <PersonList\r\n            people={this.state.people}\r\n            onAddPerson={() => this.handleAddPerson()}\r\n            onDeletePerson={() => this.handleDeletePerson()}\r\n          ></PersonList>\r\n        </div>\r\n\r\n        <div>\r\n          <button onClick={this.calculator}>Calculate</button>\r\n        </div>\r\n        <br />\r\n        <div>{this.state.midPoint}</div>\r\n\r\n        <div><button onClick={this.getTravelTimes}>Linq up!</button></div>\r\n\r\n        <div>\r\n          <MapContainer\r\n            POI={this.state.POI}\r\n            addresses={this.state.addresses}\r\n            currentLocation={this.state.currentLocation}\r\n            coords={this.state.coords}\r\n            midpoint={this.state.midPoint}\r\n            radius={this.state.radius}\r\n            nearbyPlaces={this.state.nearbyPlaces}\r\n            apiKey={this.state.apiKey}\r\n            onSetMeetupPoint={(loc) => this.handleSetMeetupPoint(loc)}\r\n          ></MapContainer>\r\n        </div>\r\n\r\n\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Application;"]},"metadata":{},"sourceType":"module"}