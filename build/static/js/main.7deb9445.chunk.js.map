{"version":3,"sources":["components/PersonList.jsx","components/Person.jsx","components/Map.jsx","components/PlacePicker.jsx","components/DirectionsPicker.jsx","components/Application.jsx","index.js"],"names":["PersonList","className","onClick","this","props","onAddPerson","onDeletePerson","people","Component","require","config","Person","state","emailClassName","checkEmail","email","test","String","toLowerCase","setState","style","width","margin","value","inputStyle","inputClassName","placeholder","apiKey","process","onSetAddress","onSelect","description","renderSuggestions","active","suggestions","onSelectSuggestion","map","suggestion","idx","type","key","event","id","onChange","e","target","onSetEmail","MapContainer","showingInfoWindow","activeMarker","selectedPlace","currentPhoto","circleLat","circleLng","displayMarkers","coords","address","index","onMarkerClick","name","addresses","pos","lat","lng","position","displayPlacesMarkers","coordsPlaces","placesNames","ratings","photos","i","nearbyPlaces","length","push","geometry","location","rating","photo_reference","photo","cleanName","icon","url","marker","onSetMeetupPoint","onSetMeetName","onClose","midpoint","prevProps","nextProps","radius","google","zoom","height","initialCenter","currentLocation","parseInt","center","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","visible","Boolean","src","alt","GoogleApiWrapper","PlacePicker","sliderValue","sliderChange","onSetRadius","onSetPOI","min","max","DirectionsPicker","checked","date","Date","ButtonGroup","toggle","radio","ToggleButton","variant","onSetTransport","split","currentTarget","onSetDate","disableClock","yearPlaceholder","monthPlaceholder","dayPlaceholder","hourPlaceholder","minutePlaceholder","clearIcon","moment","Application","v","handleSetAddress","handleSetEmail","midPoint","POI","transportOption","meetupPoint","travelTimes","leaveTimes","emails","linqupbtnStyle","display","modalVisibility","meetupPointName","newEmails","slice","newAddresses","emptyChecker","a","handleAddPerson","resetMidPoint","handleDeletePerson","newcoords","getCoords","bod","Axios","post","res","status","Error","body","message","data","convertToCoords","all","newCoords","findMidPoint","coordsList","lat1","Math","PI","lat2","lon1","lon2","bx","cos","by","sin","latMid","atan2","sqrt","lonMid","tmp","formatter","x","formatted","newResult","lon","hyp","calculator","linqupBtnChecker","findNearbyPlaces","newMeetupPoint","content","results","setCurrentLocation","navigator","geolocation","getCurrentPosition","latitude","longitude","handleSetPOI","getPlaces","handleSetRadius","handleSetTransport","l","handleSetDate","newDate","format","handleSetMeetupPoint","loc","getTravelTimes","targetLat","targetLon","travelMode","originLat","originLon","time","routes","legs","duration","getLeaveTimes","current","arrivalTime","clone","subtract","sendEmails","text","to","valid","re","showModal","hideModal","handleSetMeetName","link","fetch","json","toString","Modal","centered","isOpen","ModalHeader","ModalBody","Alert","color","ModalFooter","Map","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7deb9445.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n\r\n\r\n\r\nclass PersonList extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n\r\n            <div className=\"buttonholder\">\r\n            <h4>\r\n              <span className=\"badge badge-info\">Participants</span>\r\n            </h4>\r\n          </div>\r\n\r\n        <div className=\"buttonholder\">\r\n        <button className=\"btn btn-outline-success\" onClick={this.props.onAddPerson}>Add Person</button>\r\n        <button className=\"btn btn-outline-danger\" onClick={this.props.onDeletePerson}>Delete Person</button>\r\n        </div>\r\n       \r\n        <div className=\"holder\">{this.props.people}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PersonList;\r\n","import React, { Component } from \"react\";\r\nimport GooglePlacesAutocomplete from \"react-google-places-autocomplete\";\r\nrequire(\"dotenv\").config();\r\n\r\nclass Person extends Component {\r\n  state = {\r\n    emailClassName: \"form-control\",\r\n  };\r\n\r\n  checkEmail = (email) => {\r\n    if (email === \"\") {\r\n      this.setState({ emailClassName: \"form-control\" });\r\n      return;\r\n    }\r\n\r\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n    if (re.test(String(email).toLowerCase())) {\r\n      this.setState({ emailClassName: \"form-control is-valid\" });\r\n    } else {\r\n      this.setState({ emailClassName: \"form-control is-invalid\" });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ width: \"400px\" }}>\r\n        <h4 style={{ margin: \"5px\" }}>\r\n          <span className=\"badge badge-secondary\">\r\n            Person #{this.props.value}\r\n          </span>\r\n        </h4>\r\n\r\n        <form>\r\n          <GooglePlacesAutocomplete\r\n            inputStyle={{ width: \"400px\", margin: \"5px\" }}\r\n            inputClassName=\"form-control\"\r\n            placeholder=\"Address\"\r\n            apiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY}\r\n            onSetAddress={this.props.onSetAddress}\r\n            onSelect={({ description }) =>\r\n              this.props.onSetAddress(description, this.props.value)\r\n            }\r\n            renderSuggestions={(active, suggestions, onSelectSuggestion) => (\r\n              <div className=\"list-group\">\r\n                {suggestions.map((suggestion, idx) => (\r\n                  <button\r\n                    style={{ width: \"400px\", margin: \"5px\" }}\r\n                    type=\"button\"\r\n                    key={idx}\r\n                    className=\"list-group-item list-group-item-action\"\r\n                    onClick={(event) => onSelectSuggestion(suggestion, event)}\r\n                  >\r\n                    {suggestion.description}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            )}\r\n          ></GooglePlacesAutocomplete>\r\n          <input\r\n            id={this.props.value}\r\n            className={this.state.emailClassName}\r\n            style={{ width: \"400px\", margin: \"5px\" }}\r\n            type=\"text\"\r\n            placeholder=\"Email\"\r\n            onChange={(e) => {\r\n              this.checkEmail(e.target.value);\r\n              this.props.onSetEmail(e.target.value, this.props.value);\r\n            }}\r\n          ></input>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Person;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Map,\r\n  Marker,\r\n  GoogleApiWrapper,\r\n  InfoWindow,\r\n  Circle,\r\n} from \"google-maps-react\";\r\nrequire(\"dotenv\").config();\r\n\r\nexport class MapContainer extends Component {\r\n\r\n  state = {\r\n    showingInfoWindow: false,\r\n    activeMarker: {},\r\n    selectedPlace: {},\r\n    currentPhoto: \"\",\r\n    circleLat: this.props.circleLat,\r\n    circleLng: this.props.circleLng,\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.circleLat !== this.state.circleLat) {\r\n      this.setState({circleLat: this.props.circleLat,circleLng:this.props.circleLng})\r\n    }\r\n  }\r\n\r\n  displayMarkers = () => {\r\n    return this.props.coords.map((address, index) => {\r\n      return (\r\n        <Marker\r\n          onClick={this.onMarkerClick}\r\n          key={index}\r\n          id={index}\r\n          name={<h4>{this.props.addresses[index]}</h4>}\r\n          pos={{\r\n            lat: address.lat,\r\n            lng: address.lng,\r\n          }}\r\n          position={{\r\n            lat: address.lat,\r\n            lng: address.lng,\r\n          }}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  displayPlacesMarkers = () => {\r\n    let coordsPlaces = [];\r\n    let placesNames = [];\r\n    let ratings = [];\r\n    let photos = [];\r\n\r\n    for (let i = 0; i < this.props.nearbyPlaces.length; i++) {\r\n      coordsPlaces.push(this.props.nearbyPlaces[i].geometry.location);\r\n      placesNames.push(this.props.nearbyPlaces[i].name);\r\n      ratings.push(this.props.nearbyPlaces[i].rating);\r\n\r\n      //if this.props.nearbyPlaces.photos[0]\r\n\r\n\r\n      //handles no photo error\r\n      if (this.props.nearbyPlaces[i].photos) {\r\n        photos.push(\r\n          \"https://maps.googleapis.com/maps/api/place/photo?maxwidth=200&maxheight=200&photoreference=\" +\r\n            this.props.nearbyPlaces[i].photos[0].photo_reference +\r\n            \"&key=\" +\r\n            process.env.REACT_APP_GOOGLE_MAPS_API_KEY\r\n        );\r\n      } else {\r\n        photos.push(\"https://static.thenounproject.com/png/1339059-200.png\");\r\n      }\r\n    }\r\n\r\n    return coordsPlaces.map((address, index) => {\r\n      return (\r\n        <Marker\r\n          onClick={this.onMarkerClick}\r\n          photo={photos[index]}\r\n          key={\"p\" + index}\r\n          id={\"place\"}\r\n          rating={ratings[index]}\r\n          name={<h4>{placesNames[index]}</h4>}\r\n          cleanName={placesNames[index]}\r\n          position={{\r\n            lat: address.lat,\r\n            lng: address.lng,\r\n          }}\r\n          pos={{\r\n            lat: address.lat,\r\n            lng: address.lng,\r\n          }}\r\n          icon={{\r\n            url: \"http://maps.google.com/mapfiles/ms/icons/ltblue-dot.png\",\r\n          }}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  onMarkerClick = (props, marker) => {\r\n    this.setState({\r\n      selectedPlace: props,\r\n      activeMarker: marker,\r\n      showingInfoWindow: true,\r\n    });\r\n    this.props.onSetMeetupPoint(this.state.activeMarker.pos);\r\n\r\n    if (this.state.activeMarker.cleanName) {\r\n      this.props.onSetMeetName(this.state.activeMarker.cleanName);\r\n    }\r\n  };\r\n\r\n  onClose = (props) => {\r\n    if (this.state.showingInfoWindow) {\r\n      this.setState({\r\n        showingInfoWindow: false,\r\n      });\r\n      this.props.onSetMeetupPoint({\r\n        lat: this.props.midpoint[0],\r\n        lng: this.props.midpoint[1],\r\n      });\r\n      this.props.onSetMeetName(\"\");\r\n    }\r\n  };\r\n\r\n  shouldComponentUpdate(nextProps) {\r\n    //prevents useless rerenders when user fidgets with radius slider\r\n\r\n    if (nextProps.radius !== this.props.radius) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Map\r\n          google={this.props.google}\r\n          zoom={12}\r\n          style={{\r\n            width: \"65.8%\",\r\n            height: \"97%\",\r\n          }}\r\n          initialCenter={{\r\n            lat: this.props.currentLocation[0],\r\n            lng: this.props.currentLocation[1],\r\n          }}\r\n        >\r\n          {this.displayMarkers()}\r\n          {this.displayPlacesMarkers()}\r\n          <Marker\r\n            onClick={this.onMarkerClick}\r\n            key=\"midpoint\"\r\n            id=\"midpoint\"\r\n            name={\r\n              !this.props.coords ? (\r\n                <h4>Midpoint</h4>\r\n              ) : (\r\n                <div>\r\n                  <h4>Midpoint</h4>\r\n                  <h4>{this.props.midpoint[0]}</h4>\r\n                  <h4>{this.props.midpoint[1]}</h4>\r\n                </div>\r\n              )\r\n            }\r\n            position={{\r\n              lat: this.props.midpoint[0],\r\n              lng: this.props.midpoint[1],\r\n            }}\r\n            pos={{\r\n              lat: this.props.midpoint[0],\r\n              lng: this.props.midpoint[1],\r\n            }}\r\n            icon={{\r\n              url: \"http://maps.google.com/mapfiles/ms/icons/green-dot.png\",\r\n            }}\r\n          ></Marker>\r\n\r\n          <Circle\r\n            radius={parseInt(this.props.radius) * 1.7}\r\n            center={{\r\n              lat: this.state.circleLat,\r\n              lng: this.state.circleLng,\r\n            }}\r\n            strokeColor=\"transparent\"\r\n            strokeOpacity={0}\r\n            strokeWeight={5}\r\n            fillColor=\"#FF0000\"\r\n            fillOpacity={0.2}\r\n            visible={Boolean(this.props.circleLat)}\r\n          ></Circle>\r\n\r\n          <InfoWindow\r\n            marker={this.state.activeMarker}\r\n            visible={this.state.showingInfoWindow}\r\n            onClose={this.onClose}\r\n          >\r\n            <div>\r\n              {this.state.selectedPlace.name}\r\n              {this.state.activeMarker.id === \"place\" ? (\r\n                <div>\r\n                  <img src={this.state.activeMarker.photo} alt=\"Image Unavailable\"></img>\r\n                  <h4>Rating: {this.state.activeMarker.rating}</h4>\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n            </div>\r\n          </InfoWindow>\r\n        </Map>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n})(MapContainer);\r\n\r\n\r\n","import React, { Component } from \"react\";\r\n\r\n\r\nclass PlacePicker extends Component {\r\n\r\n    state = {\r\n        sliderValue: \"300\"\r\n    }\r\n\r\n    sliderChange = (e) => {\r\n\r\n        this.setState({sliderValue:e})\r\n        this.props.onSetRadius(e)\r\n\r\n    }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <div className=\"buttonholder\"><h4><span className=\"badge badge-info\">Point of Interest</span></h4></div>\r\n          <input style={{width:\"400px\", margin:\"5px\"}} className=\"form-control\" type=\"test\" placeholder=\"Leave Blank If None\" onChange={(e)=>this.props.onSetPOI(e.target.value)}></input>\r\n        </div>\r\n        <div>\r\n          <div className=\"buttonholder\"><h4><span className=\"badge badge-info\">Point of Interest Radius</span></h4></div>\r\n          <input\r\n            style={{width:\"400px\",margin:\"5px\"}}\r\n            type=\"range\"\r\n            min=\"0\"\r\n            max=\"1000\"\r\n            value={this.state.sliderValue}\r\n            onChange={(e)=>this.sliderChange(e.target.value)}\r\n          ></input>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PlacePicker;\r\n","import React, { Component } from \"react\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\r\nimport \"./icons.css\";\r\nimport DateTimePicker from \"react-datetime-picker\";\r\n\r\nclass DirectionsPicker extends Component {\r\n  state = {\r\n    checked: \"3\",\r\n    date: new Date(),\r\n  };\r\n\r\n  render() {\r\n    const radios = [\r\n      { name: \"directions_bike\", value: \"1\" },\r\n      { name: \"directions_bus\", value: \"2\" },\r\n      { name: \"directions_car\", value: \"3\" },\r\n      { name: \"directions_walk\", value: \"4\" },\r\n    ];\r\n\r\n    return (\r\n      <div>\r\n        <div>\r\n          <div className=\"buttonholder\">\r\n            <h4>\r\n              <span className=\"badge badge-info\">Transport Type</span>\r\n            </h4>\r\n          </div>\r\n\r\n          <ButtonGroup toggle className=\"buttonholder\">\r\n            {radios.map((radio, idx) => (\r\n              <ToggleButton\r\n                key={idx}\r\n                type=\"radio\"\r\n                variant=\"secondary\"\r\n                name=\"radio\"\r\n                value={radio.value}\r\n                checked={radio.value === this.state.checked}\r\n                onChange={(e) => {\r\n                  this.props.onSetTransport(radio.name.split(\"_\")[1]);\r\n                  this.setState({ checked: e.currentTarget.value });\r\n                }}\r\n              >\r\n                <i className=\"material-icons\">{radio.name}</i>\r\n              </ToggleButton>\r\n            ))}\r\n          </ButtonGroup>\r\n        </div>\r\n\r\n        <div>\r\n          <div className=\"buttonholder\">\r\n            <h4>\r\n              <span className=\"badge badge-info\">Meet Up Time</span>\r\n            </h4>\r\n          </div>\r\n\r\n          <div className=\"togglebuttonholder\">\r\n            <DateTimePicker\r\n              className=\"badge badge-light\"\r\n              onChange={(date) => {\r\n                this.setState({ date });\r\n                this.props.onSetDate(date);\r\n              }}\r\n              value={this.state.date}\r\n              disableClock={true}\r\n              yearPlaceholder=\"yyyy\"\r\n              monthPlaceholder=\"mm\"\r\n              dayPlaceholder=\"dd\"\r\n              hourPlaceholder=\"hh\"\r\n              minutePlaceholder=\"mm\"\r\n              clearIcon={null}\r\n            ></DateTimePicker>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DirectionsPicker;\r\n","import React, { Component } from \"react\";\r\nimport PersonList from \"./PersonList\";\r\nimport Person from \"./Person\";\r\nimport fetch from \"cross-fetch\";\r\nimport MapContainer from \"./Map\";\r\nimport PlacePicker from \"./PlacePicker\";\r\nimport DirectionsPicker from \"./DirectionsPicker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./styles.css\";\r\nimport Axios from \"axios\";\r\nimport { Alert, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\nconst moment = require(\"moment\");\r\n\r\nclass Application extends Component {\r\n  state = {\r\n    people: [\r\n      <Person\r\n        key=\"1\"\r\n        value=\"1\"\r\n        onSetAddress={(e, v) => this.handleSetAddress(e, v)}\r\n        onSetEmail={(e, v) => this.handleSetEmail(e, v)}\r\n      ></Person>,\r\n      <Person\r\n        key=\"2\"\r\n        value=\"2\"\r\n        onSetAddress={(e, v) => this.handleSetAddress(e, v)}\r\n        onSetEmail={(e, v) => this.handleSetEmail(e, v)}\r\n      ></Person>,\r\n      <Person\r\n        key=\"3\"\r\n        value=\"3\"\r\n        onSetAddress={(e, v) => this.handleSetAddress(e, v)}\r\n        onSetEmail={(e, v) => this.handleSetEmail(e, v)}\r\n      ></Person>,\r\n    ],\r\n    addresses: [\"\", \"\", \"\"],\r\n\r\n    coords: [],\r\n\r\n    midPoint: \"\",\r\n\r\n    currentLocation: [],\r\n\r\n    POI: \"\",\r\n\r\n    radius: \"300\",\r\n\r\n    nearbyPlaces: {},\r\n\r\n    transportOption: null,\r\n\r\n    date: new Date(),\r\n\r\n    meetupPoint: \"\",\r\n\r\n    travelTimes: [],\r\n\r\n    leaveTimes: [],\r\n\r\n    emails: [\"\", \"\", \"\"],\r\n\r\n    linqupbtnStyle: { display: \"none\" },\r\n\r\n    modalVisibility: false,\r\n\r\n    meetupPointName: \"\",\r\n\r\n    circleLat: 0,\r\n\r\n    circleLng: 0,\r\n\r\n\r\n  };\r\n\r\n  handleSetEmail = (e, v) => {\r\n    let newEmails = this.state.emails.slice();\r\n    newEmails[v - 1] = e;\r\n    this.setState({ emails: newEmails });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.handleSetDate(this.state.date);\r\n    this.setCurrentLocation();\r\n  }\r\n\r\n  handleSetAddress = (e, v) => {\r\n    let newAddresses = this.state.addresses.slice();\r\n    newAddresses[v - 1] = e;\r\n    this.setState({ addresses: newAddresses });\r\n  };\r\n\r\n  emptyChecker = () => {\r\n    const a = this.state.addresses;\r\n\r\n    for (let i of a) {\r\n      if (i === \"\") {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  handleAddPerson = () => {\r\n    this.resetMidPoint();\r\n    let newEmails = [...this.state.emails, \"\"];\r\n    let newAddresses = [...this.state.addresses, \"\"];\r\n    this.setState({\r\n      addresses: newAddresses,\r\n      leaveTimes: [],\r\n      meetupPoint: null,\r\n      travelTimes: [],\r\n      nearbyPlaces: {},\r\n      emails: newEmails,\r\n      circleLat:0,\r\n      circleLng:0,\r\n      coords:[]\r\n    });\r\n    this.setState({\r\n      people: [\r\n        ...this.state.people,\r\n        <Person\r\n          key={this.state.people.length + 1}\r\n          value={this.state.people.length + 1}\r\n          onSetAddress={(e, v) => this.handleSetAddress(e, v)}\r\n          onSetEmail={(e, v) => this.handleSetEmail(e, v)}\r\n        ></Person>,\r\n      ],\r\n    });\r\n  };\r\n\r\n  handleDeletePerson = () => {\r\n    let newcoords = this.state.coords.slice(0, -1);\r\n    this.setState({\r\n      coords: newcoords,\r\n      leaveTimes: [],\r\n      meetupPoint: null,\r\n      travelTimes: [],\r\n      nearbyPlaces: {},\r\n      circleLat:0,\r\n      circleLng:0,\r\n      coords:[]\r\n    });\r\n\r\n    this.resetMidPoint();\r\n    let newEmails = this.state.emails.slice(0, -1);\r\n    let newAddresses = this.state.addresses.slice(0, -1);\r\n    this.setState({ addresses: newAddresses, emails: newEmails });\r\n    let people = this.state.people.slice(0, -1);\r\n    this.setState({ people });\r\n  };\r\n\r\n  getCoords = async (address) => {\r\n    let bod = { address: address };\r\n    const res = await Axios.post(\"http://localhost:4000/geolocate\", bod);\r\n\r\n    if (res.status !== 200) throw Error(res.body.message);\r\n\r\n    return res.data;\r\n  };\r\n\r\n  convertToCoords = async () => {\r\n    const all = this.state.addresses;\r\n\r\n    let newCoords = [];\r\n    let a;\r\n\r\n    for (let i = 0; i < all.length; i++) {\r\n      a = await this.getCoords(all[i]);\r\n      newCoords.push(a);\r\n    }\r\n\r\n    this.setState({ coords: newCoords });\r\n  };\r\n\r\n  findMidPoint = (coordsList) => {\r\n    if (coordsList.length === 2) {\r\n      let lat1 = coordsList[0].lat * (Math.PI / 180);\r\n      let lat2 = coordsList[1].lat * (Math.PI / 180);\r\n      let lon1 = coordsList[0].lng * (Math.PI / 180);\r\n      let lon2 = coordsList[1].lng * (Math.PI / 180);\r\n\r\n      let bx = Math.cos(lat2) * Math.cos(lon2 - lon1);\r\n      let by = Math.cos(lat2) * Math.sin(lon2 - lon1);\r\n\r\n      let latMid = Math.atan2(\r\n        Math.sin(lat1) + Math.sin(lat2),\r\n        Math.sqrt((Math.cos(lat1) + bx) ** 2) + by ** 2\r\n      );\r\n      let lonMid = lon1 + Math.atan2(by, Math.cos(lat1) + bx);\r\n\r\n      return [latMid * (180 / Math.PI), lonMid * (180 / Math.PI)];\r\n    }\r\n\r\n    //Two or more addresses\r\n\r\n    const formatter = (x) => {\r\n      //Converting from degrees to radians\r\n      let lat1 = x.lat * (Math.PI / 180);\r\n      let lon1 = x.lng * (Math.PI / 180);\r\n      //Converting to cartesian coords\r\n\r\n      let x1 = Math.cos(lat1) * Math.cos(lon1);\r\n      let y1 = Math.cos(lat1) * Math.sin(lon1);\r\n      let z1 = Math.sin(lat1);\r\n\r\n      return [x1, y1, z1];\r\n    };\r\n\r\n    let formatted = [];\r\n\r\n    for (let i of coordsList) {\r\n      formatted.push(formatter(i));\r\n    }\r\n\r\n    let tmp;\r\n    let newResult = [];\r\n\r\n    for (let i = 0; i < formatted.length; i++) {\r\n      tmp = 0;\r\n      for (let j of formatted) {\r\n        tmp += j[i];\r\n      }\r\n\r\n      newResult.push(tmp / formatted.length);\r\n    }\r\n\r\n    //newResult is now in format[x,y,z]\r\n\r\n    let lon = Math.atan2(newResult[1], newResult[0]);\r\n    let hyp = Math.sqrt(newResult[0] ** 2 + newResult[1] ** 2);\r\n    let lat = Math.atan2(newResult[2], hyp);\r\n\r\n    //converting back to degrees\r\n    lat = lat * (180 / Math.PI);\r\n    lon = lon * (180 / Math.PI);\r\n\r\n    return [lat, lon];\r\n  };\r\n\r\n  calculator = async () => {\r\n    //check if empty addresses\r\n    if (this.emptyChecker()) {\r\n      this.setState({ midPoint: \"error\" });\r\n      return null;\r\n    }\r\n\r\n    if (this.state.addresses.length < 2) {\r\n      this.setState({ midPoint: \"error\" });\r\n      return null;\r\n    }\r\n    await this.convertToCoords();\r\n    let midPoint = await this.findMidPoint(this.state.coords);\r\n    this.setState({\r\n      midPoint: midPoint,\r\n      meetupPoint: { lat: midPoint[0], lng: midPoint[1] },\r\n      circleLat: midPoint[0], circleLng:midPoint[1]\r\n    });\r\n    this.linqupBtnChecker();\r\n    this.findNearbyPlaces();\r\n  };\r\n\r\n  findNearbyPlaces = async () => {\r\n    if (this.state.POI === \"\") {\r\n      //if no Point of interest selected\r\n      let newMeetupPoint = {\r\n        lat: this.state.midPoint[0],\r\n        lng: this.state.midPoint[1],\r\n      };\r\n      this.setState({ meetupPoint: newMeetupPoint });\r\n      return;\r\n    }\r\n\r\n    const content = {\r\n      midPoint: this.state.midPoint,\r\n      radius: this.state.radius,\r\n      POI: this.state.POI,\r\n    };\r\n\r\n    const res = await Axios.post(\"http://localhost:4000/nearbyplaces\", content);\r\n\r\n    if (res.status !== 200) throw Error(res);\r\n\r\n    if (res.data.status === \"ZERO_RESULTS\") {\r\n      return;\r\n    } else {\r\n      this.setState({ nearbyPlaces: res.data.results });\r\n    }\r\n  };\r\n\r\n  resetMidPoint = () => {\r\n    this.setState({ midPoint: [] });\r\n  };\r\n\r\n  setCurrentLocation = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        const lattt = position.coords.latitude;\r\n        const longgg = position.coords.longitude;\r\n\r\n        let newcoords = [lattt, longgg];\r\n\r\n        this.setState({ currentLocation: newcoords });\r\n      });\r\n    }\r\n  };\r\n\r\n  handleSetPOI = (e) => {\r\n    this.setState({ POI: e });\r\n    if (e === \"\") {\r\n      this.setState({ nearbyPlaces: {} });\r\n    }\r\n  };\r\n\r\n  getPlaces = () => {\r\n    if (this.state.POI === \"\") {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  handleSetRadius = (e) => {\r\n    this.setState({ radius: e });\r\n  };\r\n\r\n  handleSetTransport = (e) => {\r\n    let l;\r\n    if (e === \"bike\") {\r\n      l = \"bicycling\";\r\n    } else if (e === \"car\") {\r\n      l = \"driving\";\r\n    } else if (e === \"walk\") {\r\n      l = \"walking\";\r\n    } else {\r\n      l = \"transit\";\r\n    }\r\n\r\n    this.setState({ transportOption: l });\r\n  };\r\n\r\n  handleSetDate = (date) => {\r\n    let newDate = moment(date);\r\n    newDate = newDate.format(\"LLL\");\r\n\r\n    this.setState({ date: newDate });\r\n  };\r\n\r\n  handleSetMeetupPoint = (loc) => {\r\n    this.setState({ meetupPoint: loc });\r\n  };\r\n\r\n  async getTime(link) {\r\n    const res = await fetch(link);\r\n    const data = await res.json();\r\n\r\n    return data.routes[0].legs[0].duration;\r\n  }\r\n\r\n  getTravelTimes = async () => {\r\n    if (this.state.meetupPoint === null) {\r\n      let newMeetupPoint = {\r\n        lat: this.state.midPoint[0],\r\n        lng: this.state.midPoint[1],\r\n      };\r\n      this.setState({ meetupPoint: newMeetupPoint });\r\n    }\r\n\r\n    if (this.state.midPoint === \"error\" || this.state.addresses.length === 0) {\r\n      return;\r\n    }\r\n\r\n    let targetLat = this.state.meetupPoint.lat;\r\n    let targetLon = this.state.meetupPoint.lng;\r\n\r\n    let travelTimes = [];\r\n\r\n    let originLat, originLon, time, travelMode, content;\r\n\r\n    if (this.state.transportOption === null) {\r\n      //defaults to driving if nothing was selected\r\n      travelMode = \"driving\";\r\n    } else {\r\n      travelMode = this.state.transportOption;\r\n    }\r\n\r\n    for (let i = 0; i < this.state.coords.length; i++) {\r\n      originLat = this.state.coords[i].lat;\r\n      originLon = this.state.coords[i].lng;\r\n\r\n      content = {\r\n        targetLat: targetLat,\r\n        targetLon: targetLon,\r\n        originLat: originLat,\r\n        originLon: originLon,\r\n        travelMode: travelMode,\r\n      };\r\n\r\n      time = await Axios.post(\"http://localhost:4000/traveltime\", content);\r\n\r\n      travelTimes.push(time.data.routes[0].legs[0].duration);\r\n    }\r\n\r\n    this.setState({ travelTimes });\r\n\r\n    this.getLeaveTimes();\r\n  };\r\n\r\n  getLeaveTimes = () => {\r\n    let travelTimes = this.state.travelTimes;\r\n    let arrivalTime = moment(this.state.date);\r\n    let leaveTimes = [];\r\n\r\n    let current;\r\n\r\n    for (let i = 0; i < travelTimes.length; i++) {\r\n      current = arrivalTime.clone().subtract(travelTimes[i].value, \"seconds\");\r\n      current = current.format(\"LLL\");\r\n      leaveTimes.push(current);\r\n    }\r\n\r\n    this.setState({ leaveTimes });\r\n  };\r\n\r\n  sendEmails = () => {\r\n    let emails = this.state.emails;\r\n    let leaveTimes = this.state.leaveTimes;\r\n    let coords = this.state.coords;\r\n    let meetupPoint = this.state.meetupPoint;\r\n\r\n    let text, email, content;\r\n\r\n    for (let i = 0; i < leaveTimes.length; i++) {\r\n      text =\r\n        \"This is a reminder to linq up!\\nIn order to arrive at the linq up point, please depart at the following time:\\n\";\r\n      text += leaveTimes[i] + \"\\n\";\r\n      text +=\r\n        \"The directions to your destination can be found using this link\\n\";\r\n      text +=\r\n        \"https://www.google.com/maps/dir/\" +\r\n        coords[i].lat +\r\n        \",\" +\r\n        coords[i].lng +\r\n        \"/\" +\r\n        meetupPoint.lat +\r\n        \",\" +\r\n        meetupPoint.lng +\r\n        \"/\";\r\n\r\n      email = emails[i];\r\n\r\n      content = { to: email, text: text };\r\n      Axios.post(\"http://localhost:4000/sendemail\", content);\r\n    }\r\n  };\r\n\r\n  linqupBtnChecker = () => {\r\n    let emails = this.state.emails;\r\n    const newStyle = { display: \"inline\" };\r\n    let valid = true;\r\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    //validating all emails before displaying linq up button to prevent email errors\r\n    for (let i = 0; i < emails.length; i++) {\r\n      if (!re.test(String(emails[i]).toLowerCase())) {\r\n        valid = false;\r\n      }\r\n    }\r\n\r\n    if (valid) {\r\n      this.setState({ linqupbtnStyle: newStyle });\r\n    }\r\n  };\r\n\r\n  showModal = () => {\r\n    this.setState({ modalVisibility: true });\r\n  };\r\n\r\n  hideModal = () => {\r\n    this.setState({ modalVisibility: false });\r\n  };\r\n\r\n  handleSetMeetName = (name) => {\r\n    this.setState({ meetupPointName: name });\r\n  };\r\n\r\n  render() {\r\n    let time = this.state.date;\r\n    let meetupPoint;\r\n\r\n    if (this.state.meetupPoint) {\r\n      if (this.state.meetupPointName !== \"\") {\r\n        meetupPoint = this.state.meetupPointName;\r\n      } else {\r\n        meetupPoint = [\r\n          this.state.meetupPoint.lat,\r\n          this.state.meetupPoint.lng,\r\n        ].toString();\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"app\">\r\n        <div className=\"banner\">\r\n          <div className=\"jumbotron\">\r\n            <h1 className=\"display-3\">Linq up</h1>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"placepicker\">\r\n          <PlacePicker\r\n            onSetRadius={(e) => this.handleSetRadius(e)}\r\n            onSetPOI={(e) => this.handleSetPOI(e)}\r\n          ></PlacePicker>\r\n        </div>\r\n\r\n        <div className=\"directionspicker\">\r\n          <DirectionsPicker\r\n            onSetTransport={(e) => this.handleSetTransport(e)}\r\n            onSetDate={(date) => this.handleSetDate(date)}\r\n          ></DirectionsPicker>\r\n        </div>\r\n\r\n        <div className=\"personlist\">\r\n          <PersonList\r\n            people={this.state.people}\r\n            onAddPerson={() => this.handleAddPerson()}\r\n            onDeletePerson={() => this.handleDeletePerson()}\r\n          ></PersonList>\r\n        </div>\r\n\r\n        <div className=\"buttons\">\r\n          <div className=\"buttonholder\">\r\n            <button\r\n              className=\"btn btn-outline-secondary\"\r\n              onClick={this.calculator}\r\n            >\r\n              Calculate\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"buttonholder\">\r\n            <button\r\n              style={this.state.linqupbtnStyle}\r\n              className=\"btn btn-outline-dark\"\r\n              onClick={() => {\r\n                this.getTravelTimes();\r\n                this.showModal();\r\n              }}\r\n            >\r\n              Linq up!\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <Modal centered={true} isOpen={this.state.modalVisibility}>\r\n          <ModalHeader>Linq up Confirmation</ModalHeader>\r\n          <ModalBody>\r\n            <Alert color=\"warning\">Linq up Time: {time}</Alert>\r\n            <Alert color=\"warning\">Linq up Place: {meetupPoint}</Alert>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <button className=\"btn btn-danger\" onClick={this.hideModal}>\r\n              Cancel\r\n            </button>\r\n            <button\r\n              className=\"btn btn-success\"\r\n              onClick={() => {\r\n                this.hideModal();\r\n                this.sendEmails();\r\n              }}\r\n            >\r\n              Proceed\r\n            </button>\r\n          </ModalFooter>\r\n        </Modal>\r\n\r\n        <div className=\"map\">\r\n          <p className=\"badge badge-secondary\">Press Ctrl+r if map did not load</p>\r\n          <MapContainer\r\n            circleLat={this.state.circleLat}\r\n            circleLng={this.state.circleLng}\r\n            POI={this.state.POI}\r\n            addresses={this.state.addresses}\r\n            currentLocation={this.state.currentLocation}\r\n            coords={this.state.coords}\r\n            midpoint={this.state.midPoint}\r\n            radius={this.state.radius}\r\n            nearbyPlaces={this.state.nearbyPlaces}\r\n            onSetMeetupPoint={(loc) => this.handleSetMeetupPoint(loc)}\r\n            onSetMeetName={(name) => this.handleSetMeetName(name)}\r\n          ></MapContainer>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Application;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Application from \"./components/Application\";\r\n\r\nReactDOM.render(\r\n\r\n    <Application />,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n\r\n"],"sourceRoot":""}