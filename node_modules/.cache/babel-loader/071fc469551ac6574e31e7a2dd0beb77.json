{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\linq-up\\\\src\\\\components\\\\Person.jsx\";\nimport React, { Component } from \"react\";\nimport GooglePlacesAutocomplete from \"react-google-places-autocomplete\";\n\nrequire(\"dotenv\").config();\n\nclass Person extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      emailClassName: \"form-control\"\n    };\n\n    this.checkEmail = email => {\n      if (email === \"\") {\n        this.setState({\n          emailClassName: \"form-control\"\n        });\n        return;\n      }\n\n      const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n      if (re.test(String(email).toLowerCase())) {\n        this.setState({\n          emailClassName: \"form-control is-valid\"\n        });\n      } else {\n        this.setState({\n          emailClassName: \"form-control is-invalid\"\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: \"400px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      style: {\n        margin: \"5px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"badge badge-secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }\n    }, \"Person #\", this.props.value)), /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(GooglePlacesAutocomplete, {\n      inputStyle: {\n        width: \"400px\",\n        margin: \"5px\"\n      },\n      inputClassName: \"form-control\",\n      placeholder: \"Address\",\n      apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n      onSetAddress: this.props.onSetAddress,\n      onSelect: ({\n        description\n      }) => this.props.onSetAddress(description, this.props.value),\n      renderSuggestions: (active, suggestions, onSelectSuggestion) => /*#__PURE__*/React.createElement(\"div\", {\n        className: \"list-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }\n      }, suggestions.map((suggestion, idx) => /*#__PURE__*/React.createElement(\"button\", {\n        style: {\n          width: \"400px\",\n          margin: \"5px\"\n        },\n        type: \"button\",\n        key: idx,\n        className: \"list-group-item list-group-item-action\",\n        onClick: event => onSelectSuggestion(suggestion, event),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 19\n        }\n      }, suggestion.description))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      id: this.props.value,\n      className: this.state.emailClassName,\n      style: {\n        width: \"400px\",\n        margin: \"5px\"\n      },\n      type: \"text\",\n      placeholder: \"Email\",\n      onChange: e => {\n        this.checkEmail(e.target.value);\n        this.props.onSetEmail(e.target.value, this.props.value);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default Person;","map":{"version":3,"sources":["C:/Users/Alex/linq-up/src/components/Person.jsx"],"names":["React","Component","GooglePlacesAutocomplete","require","config","Person","state","emailClassName","checkEmail","email","setState","re","test","String","toLowerCase","render","width","margin","props","value","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","onSetAddress","description","active","suggestions","onSelectSuggestion","map","suggestion","idx","event","e","target","onSetEmail"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport GooglePlacesAutocomplete from \"react-google-places-autocomplete\";\r\nrequire(\"dotenv\").config();\r\n\r\nclass Person extends Component {\r\n  state = {\r\n    emailClassName: \"form-control\",\r\n  };\r\n\r\n  checkEmail = (email) => {\r\n    if (email === \"\") {\r\n      this.setState({ emailClassName: \"form-control\" });\r\n      return;\r\n    }\r\n\r\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n    if (re.test(String(email).toLowerCase())) {\r\n      this.setState({ emailClassName: \"form-control is-valid\" });\r\n    } else {\r\n      this.setState({ emailClassName: \"form-control is-invalid\" });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ width: \"400px\" }}>\r\n        <h4 style={{ margin: \"5px\" }}>\r\n          <span className=\"badge badge-secondary\">\r\n            Person #{this.props.value}\r\n          </span>\r\n        </h4>\r\n\r\n        <form>\r\n          <GooglePlacesAutocomplete\r\n            inputStyle={{ width: \"400px\", margin: \"5px\" }}\r\n            inputClassName=\"form-control\"\r\n            placeholder=\"Address\"\r\n            apiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY}\r\n            onSetAddress={this.props.onSetAddress}\r\n            onSelect={({ description }) =>\r\n              this.props.onSetAddress(description, this.props.value)\r\n            }\r\n            renderSuggestions={(active, suggestions, onSelectSuggestion) => (\r\n              <div className=\"list-group\">\r\n                {suggestions.map((suggestion, idx) => (\r\n                  <button\r\n                    style={{ width: \"400px\", margin: \"5px\" }}\r\n                    type=\"button\"\r\n                    key={idx}\r\n                    className=\"list-group-item list-group-item-action\"\r\n                    onClick={(event) => onSelectSuggestion(suggestion, event)}\r\n                  >\r\n                    {suggestion.description}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            )}\r\n          ></GooglePlacesAutocomplete>\r\n          <input\r\n            id={this.props.value}\r\n            className={this.state.emailClassName}\r\n            style={{ width: \"400px\", margin: \"5px\" }}\r\n            type=\"text\"\r\n            placeholder=\"Email\"\r\n            onChange={(e) => {\r\n              this.checkEmail(e.target.value);\r\n              this.props.onSetEmail(e.target.value, this.props.value);\r\n            }}\r\n          ></input>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Person;\r\n"]},"metadata":{},"sourceType":"module"}