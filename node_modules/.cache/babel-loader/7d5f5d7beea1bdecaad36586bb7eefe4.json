{"ast":null,"code":"'use strict';\n/**\n * Dependencies\n */\n\nconst chalk = require('chalk');\n/**\n * Response error class\n */\n\n\nclass ResponseError extends Error {\n  /**\n   * Constructor\n   */\n  constructor(response) {\n    //Super\n    super(); //Extract data from response\n\n    const {\n      headers,\n      status,\n      statusText,\n      data\n    } = response; //Set data\n\n    this.code = status;\n    this.message = statusText;\n    this.response = {\n      headers,\n      body: data\n    }; //Capture stack trace\n\n    if (!this.stack) {\n      Error.captureStackTrace(this, this.constructor);\n    } //Clean up stack trace\n\n\n    const regex = new RegExp(process.cwd() + '/', 'gi');\n    this.stack = this.stack.replace(regex, '');\n  }\n  /**\n   * Convert to string\n   */\n\n\n  toString() {\n    const {\n      body\n    } = this.response;\n    let err = chalk.red(`${this.message} (${this.code})`);\n\n    if (body && Array.isArray(body.errors)) {\n      body.errors.forEach(error => {\n        const message = chalk.yellow(error.message);\n        const field = chalk.grey(error.field);\n        const help = chalk.grey(error.help);\n        err += `\\n  ${message}\\n    ${field}\\n    ${help}`;\n      });\n    }\n\n    return err;\n  }\n  /**\n   * Convert to simple object for JSON responses\n   */\n\n\n  toJSON() {\n    const {\n      message,\n      code,\n      response\n    } = this;\n    return {\n      message,\n      code,\n      response\n    };\n  }\n\n} //Export\n\n\nmodule.exports = ResponseError;","map":{"version":3,"sources":["C:/Users/Alex/linq-up/node_modules/@sendgrid/helpers/classes/response-error.js"],"names":["chalk","require","ResponseError","Error","constructor","response","headers","status","statusText","data","code","message","body","stack","captureStackTrace","regex","RegExp","process","cwd","replace","toString","err","red","Array","isArray","errors","forEach","error","yellow","field","grey","help","toJSON","module","exports"],"mappings":"AAAA;AAEA;;;;AAGA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;AAEA;;;;;AAGA,MAAMC,aAAN,SAA4BC,KAA5B,CAAkC;AAEhC;;;AAGAC,EAAAA,WAAW,CAACC,QAAD,EAAW;AAEpB;AACA,YAHoB,CAKpB;;AACA,UAAM;AAACC,MAAAA,OAAD;AAAUC,MAAAA,MAAV;AAAkBC,MAAAA,UAAlB;AAA8BC,MAAAA;AAA9B,QAAsCJ,QAA5C,CANoB,CAQpB;;AACA,SAAKK,IAAL,GAAYH,MAAZ;AACA,SAAKI,OAAL,GAAeH,UAAf;AACA,SAAKH,QAAL,GAAgB;AAACC,MAAAA,OAAD;AAAUM,MAAAA,IAAI,EAAEH;AAAhB,KAAhB,CAXoB,CAapB;;AACA,QAAI,CAAC,KAAKI,KAAV,EAAiB;AACfV,MAAAA,KAAK,CAACW,iBAAN,CAAwB,IAAxB,EAA8B,KAAKV,WAAnC;AACD,KAhBmB,CAkBpB;;;AACA,UAAMW,KAAK,GAAG,IAAIC,MAAJ,CAAWC,OAAO,CAACC,GAAR,KAAgB,GAA3B,EAAgC,IAAhC,CAAd;AACA,SAAKL,KAAL,GAAa,KAAKA,KAAL,CAAWM,OAAX,CAAmBJ,KAAnB,EAA0B,EAA1B,CAAb;AACD;AAED;;;;;AAGAK,EAAAA,QAAQ,GAAG;AACT,UAAM;AAACR,MAAAA;AAAD,QAAS,KAAKP,QAApB;AACA,QAAIgB,GAAG,GAAGrB,KAAK,CAACsB,GAAN,CAAW,GAAE,KAAKX,OAAQ,KAAI,KAAKD,IAAK,GAAxC,CAAV;;AACA,QAAIE,IAAI,IAAIW,KAAK,CAACC,OAAN,CAAcZ,IAAI,CAACa,MAAnB,CAAZ,EAAwC;AACtCb,MAAAA,IAAI,CAACa,MAAL,CAAYC,OAAZ,CAAoBC,KAAK,IAAI;AAC3B,cAAMhB,OAAO,GAAGX,KAAK,CAAC4B,MAAN,CAAaD,KAAK,CAAChB,OAAnB,CAAhB;AACA,cAAMkB,KAAK,GAAG7B,KAAK,CAAC8B,IAAN,CAAWH,KAAK,CAACE,KAAjB,CAAd;AACA,cAAME,IAAI,GAAG/B,KAAK,CAAC8B,IAAN,CAAWH,KAAK,CAACI,IAAjB,CAAb;AACAV,QAAAA,GAAG,IAAK,OAAMV,OAAQ,SAAQkB,KAAM,SAAQE,IAAK,EAAjD;AACD,OALD;AAMD;;AACD,WAAOV,GAAP;AACD;AAED;;;;;AAGAW,EAAAA,MAAM,GAAG;AACP,UAAM;AAACrB,MAAAA,OAAD;AAAUD,MAAAA,IAAV;AAAgBL,MAAAA;AAAhB,QAA4B,IAAlC;AACA,WAAO;AAACM,MAAAA,OAAD;AAAUD,MAAAA,IAAV;AAAgBL,MAAAA;AAAhB,KAAP;AACD;;AAnD+B,C,CAsDlC;;;AACA4B,MAAM,CAACC,OAAP,GAAiBhC,aAAjB","sourcesContent":["'use strict';\n\n/**\n * Dependencies\n */\nconst chalk = require('chalk');\n\n/**\n * Response error class\n */\nclass ResponseError extends Error {\n\n  /**\n   * Constructor\n   */\n  constructor(response) {\n\n    //Super\n    super();\n\n    //Extract data from response\n    const {headers, status, statusText, data} = response;\n\n    //Set data\n    this.code = status;\n    this.message = statusText;\n    this.response = {headers, body: data};\n\n    //Capture stack trace\n    if (!this.stack) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n\n    //Clean up stack trace\n    const regex = new RegExp(process.cwd() + '/', 'gi');\n    this.stack = this.stack.replace(regex, '');\n  }\n\n  /**\n   * Convert to string\n   */\n  toString() {\n    const {body} = this.response;\n    let err = chalk.red(`${this.message} (${this.code})`);\n    if (body && Array.isArray(body.errors)) {\n      body.errors.forEach(error => {\n        const message = chalk.yellow(error.message);\n        const field = chalk.grey(error.field);\n        const help = chalk.grey(error.help);\n        err += `\\n  ${message}\\n    ${field}\\n    ${help}`;\n      });\n    }\n    return err;\n  }\n\n  /**\n   * Convert to simple object for JSON responses\n   */\n  toJSON() {\n    const {message, code, response} = this;\n    return {message, code, response};\n  }\n}\n\n//Export\nmodule.exports = ResponseError;\n"]},"metadata":{},"sourceType":"script"}