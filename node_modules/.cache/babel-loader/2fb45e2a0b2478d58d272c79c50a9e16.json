{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\linq-up\\\\src\\\\components\\\\Application.jsx\";\nimport React, { Component, StrictMode } from \"react\";\nimport PersonList from './PersonList';\nimport Person from './Person';\nimport fetch from \"cross-fetch\";\nimport MapContainer from \"./Map\";\n\nclass Application extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      apiKey: \"&key=AIzaSyAF6LzDWnCO0yQ3_xVfXMYicN6MqUFl4q0\",\n      people: [/*#__PURE__*/React.createElement(Person, {\n        key: \"1\",\n        value: \"1\",\n        onSetAddress: (e, v) => this.handleSetAddress(e, v),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Person, {\n        key: \"2\",\n        value: \"2\",\n        onSetAddress: (e, v) => this.handleSetAddress(e, v),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Person, {\n        key: \"3\",\n        value: \"3\",\n        onSetAddress: (e, v) => this.handleSetAddress(e, v),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 13\n        }\n      })],\n      addresses: [\"\", \"\", \"\"],\n      coords: [],\n      midPoint: \"\",\n      currentLocation: [{\n        lat: null,\n        lng: null\n      }]\n    };\n\n    this.handleSetAddress = (e, v) => {\n      let newAddresses = this.state.addresses.slice();\n      newAddresses[v - 1] = e;\n      this.setState({\n        addresses: newAddresses\n      });\n    };\n\n    this.emptyChecker = () => {\n      const a = this.state.addresses;\n\n      for (let i of a) {\n        if (i === \"\") {\n          return true;\n        }\n\n        ;\n      }\n\n      ;\n      return false;\n    };\n\n    this.handleAddPerson = () => {\n      this.resetMidPoint();\n      let newAddresses = [...this.state.addresses, \"\"];\n      this.setState({\n        addresses: newAddresses\n      });\n      this.setState({\n        people: [...this.state.people, /*#__PURE__*/React.createElement(Person, {\n          key: this.state.people.length + 1,\n          value: this.state.people.length + 1,\n          onSetAddress: (e, v) => this.handleSetAddress(e, v),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }\n        })]\n      });\n    };\n\n    this.handleDeletePerson = () => {\n      this.resetMidPoint();\n      let newAddresses = this.state.addresses.slice(0, -1);\n      this.setState({\n        addresses: newAddresses\n      });\n      let people = this.state.people.slice(0, -1);\n      this.setState({\n        people: people\n      });\n    };\n\n    this.stringParser = a => {\n      let b = a.split(\" \");\n      let newString = \"\";\n\n      for (let i = 0; i < b.length; i++) {\n        newString += b[i] + \"%20\";\n      }\n\n      return newString.slice(0, -3);\n    };\n\n    this.convertToCoords = async () => {\n      const all = this.state.addresses;\n      const url = \"https://maps.googleapis.com/maps/api/geocode/json?address=\";\n      const apiKey = this.state.apiKey;\n      let fullUrl;\n      let newCoords = [];\n      let a;\n\n      for (let i = 0; i < all.length; i++) {\n        fullUrl = url + all[i] + apiKey;\n        a = await this.getCoords(fullUrl);\n        newCoords.push(a);\n      }\n\n      this.setState({\n        coords: newCoords\n      });\n    };\n\n    this.findMidPoint = coordsList => {\n      if (coordsList.length === 2) {\n        let lat1 = coordsList[0].lat * (Math.PI / 180);\n        let lat2 = coordsList[1].lat * (Math.PI / 180);\n        let lon1 = coordsList[0].lng * (Math.PI / 180);\n        let lon2 = coordsList[1].lng * (Math.PI / 180);\n        let bx = Math.cos(lat2) * Math.cos(lon2 - lon1);\n        let by = Math.cos(lat2) * Math.sin(lon2 - lon1);\n        let latMid = Math.atan2(Math.sin(lat1) + Math.sin(lat2), Math.sqrt((Math.cos(lat1) + bx) ** 2) + by ** 2);\n        let lonMid = lon1 + Math.atan2(by, Math.cos(lat1) + bx);\n        return [latMid * (180 / Math.PI), lonMid * (180 / Math.PI)];\n      }\n\n      ; //Two or more addresses\n\n      const formatter = x => {\n        //Converting from degrees to radians\n        let lat1 = x.lat * (Math.PI / 180);\n        let lon1 = x.lng * (Math.PI / 180); //Converting to cartesian coords\n\n        let x1 = Math.cos(lat1) * Math.cos(lon1);\n        let y1 = Math.cos(lat1) * Math.sin(lon1);\n        let z1 = Math.sin(lat1);\n        return [x1, y1, z1];\n      };\n\n      let formatted = [];\n\n      for (let i of coordsList) {\n        formatted.push(formatter(i));\n      }\n\n      let tmp;\n      let newResult = [];\n\n      for (let i = 0; i < formatted.length; i++) {\n        tmp = 0;\n\n        for (let j of formatted) {\n          tmp += j[i];\n        }\n\n        newResult.push(tmp / formatted.length);\n      } //newResult is now in format[x,y,z]\n\n\n      let lon = Math.atan2(newResult[1], newResult[0]);\n      let hyp = Math.sqrt(newResult[0] ** 2 + newResult[1] ** 2);\n      let lat = Math.atan2(newResult[2], hyp); //converting back to degrees\n\n      lat = lat * (180 / Math.PI);\n      lon = lon * (180 / Math.PI);\n      return [lat, lon];\n    };\n\n    this.calculator = async () => {\n      //check if empty addresses\n      if (this.emptyChecker()) {\n        this.setState({\n          midPoint: \"error\"\n        });\n        return null;\n      }\n\n      if (this.state.addresses.length < 2) {\n        this.setState({\n          midPoint: \"error\"\n        });\n        return null;\n      }\n\n      await this.convertToCoords();\n      let midPoint = await this.findMidPoint(this.state.coords);\n      this.setState({\n        midPoint: midPoint\n      });\n      return this.state.midPoint;\n    };\n\n    this.resetMidPoint = () => {\n      this.setState({\n        midPoint: []\n      });\n    };\n  }\n\n  async getCoords(link) {\n    const res = await fetch(link);\n    const data = await res.json();\n    return data['results'][0].geometry.location;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 13\n      }\n    }, navigator.geolocation.getCurrentPosition(position => {\n      this.setState({});\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }\n    }, \"Linq\"), /*#__PURE__*/React.createElement(PersonList, {\n      people: this.state.people,\n      onAddPerson: () => this.handleAddPerson(),\n      onDeletePerson: () => this.handleDeletePerson(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.calculator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 22\n      }\n    }, \"Calculate\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }\n    }, this.state.midPoint), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(MapContainer, {\n      coords: this.state.coords,\n      midpoint: this.state.midPoint,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 22\n      }\n    })));\n  }\n\n}\n\nexport default Application;","map":{"version":3,"sources":["C:/Users/Alex/linq-up/src/components/Application.jsx"],"names":["React","Component","StrictMode","PersonList","Person","fetch","MapContainer","Application","state","apiKey","people","e","v","handleSetAddress","addresses","coords","midPoint","currentLocation","lat","lng","newAddresses","slice","setState","emptyChecker","a","i","handleAddPerson","resetMidPoint","length","handleDeletePerson","stringParser","b","split","newString","convertToCoords","all","url","fullUrl","newCoords","getCoords","push","findMidPoint","coordsList","lat1","Math","PI","lat2","lon1","lon2","bx","cos","by","sin","latMid","atan2","sqrt","lonMid","formatter","x","x1","y1","z1","formatted","tmp","newResult","j","lon","hyp","calculator","link","res","data","json","geometry","location","render","navigator","geolocation","getCurrentPosition","position"],"mappings":"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","sourcesContent":["import React, { Component, StrictMode } from \"react\";\r\nimport PersonList from './PersonList';\r\nimport Person from './Person';\r\nimport fetch from \"cross-fetch\";\r\nimport MapContainer from \"./Map\";\r\n\r\n\r\n\r\n\r\nclass Application extends Component {\r\n\r\n    \r\n    state = { \r\n\r\n        apiKey: \"&key=AIzaSyAF6LzDWnCO0yQ3_xVfXMYicN6MqUFl4q0\",\r\n\r\n        people: [\r\n            <Person key=\"1\" value=\"1\" onSetAddress = {(e,v) =>this.handleSetAddress(e,v)}></Person>,\r\n            <Person key=\"2\" value=\"2\" onSetAddress = {(e,v) =>this.handleSetAddress(e,v)}></Person>,\r\n            <Person key=\"3\" value=\"3\" onSetAddress = {(e,v) =>this.handleSetAddress(e,v)}></Person>,\r\n          ],\r\n        addresses: [\r\n            \"\",\"\",\"\"\r\n        ],\r\n\r\n        coords: [],\r\n\r\n        midPoint: \"\",\r\n\r\n        currentLocation: [{lat:null,lng:null}],\r\n\r\n        \r\n     }\r\n\r\n    handleSetAddress = (e,v) => {\r\n        let newAddresses = this.state.addresses.slice();\r\n        newAddresses[v-1] = e;\r\n        this.setState({addresses:newAddresses});\r\n\r\n    }\r\n\r\n\r\n    emptyChecker = () => {\r\n        const a = this.state.addresses;\r\n\r\n        for (let i of a) {\r\n            if (i === \"\") {\r\n                return true;\r\n            };\r\n        };\r\n\r\n        return false;\r\n    }\r\n\r\n    handleAddPerson = () => {\r\n        this.resetMidPoint();\r\n        let newAddresses = [...this.state.addresses,\"\"];\r\n        this.setState({addresses:newAddresses});\r\n        this.setState({\r\n          people: [\r\n            ...this.state.people,\r\n            <Person\r\n              key={this.state.people.length + 1}\r\n              value={this.state.people.length + 1}\r\n              onSetAddress = {(e,v) =>this.handleSetAddress(e,v)}\r\n            ></Person>,\r\n          ],\r\n        });\r\n      };\r\n\r\n    handleDeletePerson = () => {\r\n        this.resetMidPoint();\r\n        let newAddresses = this.state.addresses.slice(0,-1);\r\n        this.setState({addresses:newAddresses});\r\n        let people = this.state.people.slice(0, -1);\r\n        this.setState({\r\n          people: people,\r\n        });\r\n      };\r\n\r\n    \r\n    stringParser = a => {\r\n\r\n        let b = a.split(\" \");\r\n        let newString = \"\";\r\n\r\n        for (let i =0; i<b.length;i++){\r\n            newString += b[i] + \"%20\";\r\n        }\r\n\r\n        return newString.slice(0,-3);\r\n    }\r\n\r\n\r\n    async getCoords(link) {\r\n\r\n        const res = await fetch(link);\r\n        const data = await res.json();\r\n\r\n        return data['results'][0].geometry.location;\r\n    }\r\n\r\n\r\n    convertToCoords = async () => {\r\n\r\n        const all = this.state.addresses;\r\n        const url = \"https://maps.googleapis.com/maps/api/geocode/json?address=\";\r\n        const apiKey = this.state.apiKey;\r\n\r\n        let fullUrl;\r\n\r\n        let newCoords = [];\r\n        let a;\r\n\r\n        for (let i = 0; i<all.length;i++) {\r\n            fullUrl = url+all[i]+apiKey;\r\n            a = (await this.getCoords(fullUrl));\r\n            newCoords.push(a);\r\n        }\r\n\r\n        this.setState({coords:newCoords});\r\n\r\n    }\r\n\r\n\r\n    findMidPoint = (coordsList) => {\r\n\r\n        if (coordsList.length === 2) {\r\n\r\n            let lat1 = coordsList[0].lat*(Math.PI/180);\r\n            let lat2 = coordsList[1].lat*(Math.PI/180);\r\n            let lon1 = coordsList[0].lng*(Math.PI/180);\r\n            let lon2 = coordsList[1].lng*(Math.PI/180);\r\n\r\n\r\n            let bx = Math.cos(lat2) * Math.cos(lon2-lon1);\r\n            let by = Math.cos(lat2) * Math.sin(lon2-lon1);\r\n\r\n            let latMid = Math.atan2((Math.sin(lat1) + Math.sin(lat2)), Math.sqrt((Math.cos(lat1)+bx)**2)+(by**2));\r\n            let lonMid = lon1 + Math.atan2(by,(Math.cos(lat1)+bx));\r\n\r\n            return [latMid*(180/Math.PI),lonMid*(180/Math.PI)];\r\n\r\n        };\r\n\r\n\r\n\r\n\r\n        //Two or more addresses\r\n        \r\n        const formatter = (x) => {\r\n\r\n            //Converting from degrees to radians\r\n            let lat1 = x.lat*(Math.PI/180);\r\n            let lon1 = x.lng*(Math.PI/180);\r\n            //Converting to cartesian coords\r\n\r\n            let x1 = Math.cos(lat1) * Math.cos(lon1);\r\n            let y1 = Math.cos(lat1) * Math.sin(lon1);\r\n            let z1 = Math.sin(lat1);\r\n\r\n            return [x1,y1,z1];\r\n\r\n        }\r\n\r\n        let formatted = [];\r\n\r\n        for (let i of coordsList) {\r\n            formatted.push(formatter(i))\r\n        }\r\n\r\n\r\n\r\n\r\n        let tmp;\r\n        let newResult = [];\r\n\r\n        for (let i = 0; i<formatted.length;i++) {\r\n            tmp = 0\r\n            for (let j of formatted) {\r\n\r\n                tmp += j[i]\r\n            }\r\n\r\n            newResult.push(tmp/formatted.length)\r\n\r\n        }\r\n\r\n\r\n\r\n        //newResult is now in format[x,y,z]\r\n\r\n        let lon = Math.atan2(newResult[1],newResult[0]);\r\n        let hyp = Math.sqrt(((newResult[0])**2) + ((newResult[1])**2));\r\n        let lat = Math.atan2(newResult[2],hyp);\r\n\r\n        //converting back to degrees\r\n        lat = lat * (180/Math.PI);\r\n        lon = lon * (180/Math.PI);\r\n\r\n        return [lat,lon];\r\n\r\n    }\r\n\r\n    calculator = async () => {\r\n\r\n        //check if empty addresses\r\n        if (this.emptyChecker()) {\r\n            this.setState({midPoint:\"error\"})\r\n            return null;\r\n        }\r\n\r\n        if (this.state.addresses.length < 2){\r\n            this.setState({midPoint:\"error\"})\r\n            return null;\r\n        }\r\n        await this.convertToCoords();\r\n        let midPoint = (await this.findMidPoint(this.state.coords));\r\n        this.setState({midPoint:midPoint});\r\n\r\n        return this.state.midPoint;\r\n\r\n    }\r\n\r\n    resetMidPoint = () => {\r\n        this.setState({midPoint:[]})\r\n    }\r\n\r\n\r\n    render() { \r\n        return ( \r\n\r\n            <div>\r\n\r\n                {navigator.geolocation.getCurrentPosition((position)=>{\r\n                    this.setState({})\r\n\r\n                })}\r\n\r\n                <h1>Linq</h1>\r\n                <PersonList\r\n                people = {this.state.people} \r\n                onAddPerson = {()=>this.handleAddPerson()}\r\n                onDeletePerson = {()=>this.handleDeletePerson()}></PersonList>\r\n\r\n                <div><button onClick={this.calculator}>Calculate</button></div>\r\n                <br/>\r\n                <div>{ this.state.midPoint }</div>\r\n\r\n                <div><MapContainer\r\n                coords={this.state.coords}\r\n                midpoint={this.state.midPoint}\r\n                ></MapContainer>\r\n                </div>\r\n                \r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Application;"]},"metadata":{},"sourceType":"module"}