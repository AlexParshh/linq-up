{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\linq-up\\\\src\\\\components\\\\Application.jsx\";\nimport React, { Component, StrictMode } from \"react\";\nimport PersonList from './PersonList';\nimport Person from './Person';\nimport fetch from \"cross-fetch\";\n\nclass Application extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      apiKey: \"&key=AIzaSyAF6LzDWnCO0yQ3_xVfXMYicN6MqUFl4q0\",\n      people: [/*#__PURE__*/React.createElement(Person, {\n        key: \"1\",\n        value: \"1\",\n        onSetAddress: (e, v) => this.handleSetAddress(e, v),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Person, {\n        key: \"2\",\n        value: \"2\",\n        onSetAddress: (e, v) => this.handleSetAddress(e, v),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Person, {\n        key: \"3\",\n        value: \"3\",\n        onSetAddress: (e, v) => this.handleSetAddress(e, v),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 13\n        }\n      })],\n      addresses: [\"\", \"\", \"\"],\n      coords: []\n    };\n\n    this.handleSetAddress = (e, v) => {\n      let newAddresses = this.state.addresses.slice();\n      newAddresses[v - 1] = e;\n      this.setState({\n        addresses: newAddresses\n      });\n    };\n\n    this.handleAddPerson = () => {\n      let newAddresses = [...this.state.addresses, \"\"];\n      this.setState({\n        addresses: newAddresses\n      });\n      this.setState({\n        people: [...this.state.people, /*#__PURE__*/React.createElement(Person, {\n          key: this.state.people.length + 1,\n          value: this.state.people.length + 1,\n          onSetAddress: (e, v) => this.handleSetAddress(e, v),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 13\n          }\n        })]\n      });\n    };\n\n    this.handleDeletePerson = () => {\n      let newAddresses = this.state.addresses.slice(0, -1);\n      this.setState({\n        addresses: newAddresses\n      });\n      let people = this.state.people.slice(0, -1);\n      this.setState({\n        people: people\n      });\n    };\n\n    this.stringParser = a => {\n      let b = a.split(\" \");\n      let newString = \"\";\n\n      for (let i = 0; i < b.length; i++) {\n        newString += b[i] + \"%20\";\n      }\n\n      return newString.slice(0, -3);\n    };\n\n    this.convertToCoords = async () => {\n      const all = this.state.addresses;\n      const url = \"https://maps.googleapis.com/maps/api/geocode/json?address=\";\n      const apiKey = this.state.apiKey;\n      let fullUrl;\n      let newCoords = [];\n      let a;\n\n      for (let i = 0; i < all.length; i++) {\n        fullUrl = url + all[i] + apiKey;\n        a = await this.getCoords(fullUrl);\n        newCoords.push(a);\n      }\n\n      this.setState({\n        coords: newCoords\n      });\n    };\n\n    this.findMidPoint = coordsList => {\n      const formatter = x => {\n        //Converting from degrees to radians\n        let lat1 = x.lat * (Math.PI / 180);\n        let lon1 = x.lng * (Math.PI / 180); //Converting to cartesian coords\n\n        let x1 = Math.cos(lat1) * Math.cos(lon1);\n        let y1 = Math.cos(lat1) * Math.sin(lon1);\n        let z1 = Math.sin(lat1);\n        return [x1, y1, z1];\n      };\n\n      let formatted = [];\n\n      for (let i of coordsList) {\n        formatted.push(formatter(i));\n      }\n\n      let tmp;\n      let newResult = [];\n\n      for (let i = 0; i < formatted.length; i++) {\n        tmp = 0;\n\n        for (let j of formatted) {\n          tmp += j[i];\n        }\n\n        newResult.push(tmp / formatted.length);\n      } //newResult is now in format[x,y,z]\n\n\n      let lon = Math.atan2(newResult[1], newResult[0]);\n      let hyp = Math.sqrt(newResult[0] ** 2 + newResult[1] ** 2);\n      let lat = Math.atan2(newResult[2], hyp); //converting back to degrees\n\n      lat = lat * (180 / Math.PI);\n      lon = lon * (180 / Math.PI);\n      console.log(lat, lon);\n    };\n\n    this.calculator = () => {\n      this.convertToCoords;\n    };\n  }\n\n  async getCoords(link) {\n    const res = await fetch(link);\n    const data = await res.json();\n    return data['results'][0].geometry.location;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }\n    }, \"Linq\"), /*#__PURE__*/React.createElement(PersonList, {\n      people: this.state.people,\n      onAddPerson: () => this.handleAddPerson(),\n      onDeletePerson: () => this.handleDeletePerson(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.findMidPoint,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 22\n      }\n    }, \"Calculate\")));\n  }\n\n}\n\nexport default Application;","map":{"version":3,"sources":["C:/Users/Alex/linq-up/src/components/Application.jsx"],"names":["React","Component","StrictMode","PersonList","Person","fetch","Application","state","apiKey","people","e","v","handleSetAddress","addresses","coords","newAddresses","slice","setState","handleAddPerson","length","handleDeletePerson","stringParser","a","b","split","newString","i","convertToCoords","all","url","fullUrl","newCoords","getCoords","push","findMidPoint","coordsList","formatter","x","lat1","lat","Math","PI","lon1","lng","x1","cos","y1","sin","z1","formatted","tmp","newResult","j","lon","atan2","hyp","sqrt","console","log","calculator","link","res","data","json","geometry","location","render"],"mappings":"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","sourcesContent":["import React, { Component, StrictMode } from \"react\";\r\nimport PersonList from './PersonList';\r\nimport Person from './Person';\r\nimport fetch from \"cross-fetch\";\r\n\r\n\r\nclass Application extends Component {\r\n\r\n    \r\n    state = { \r\n\r\n        apiKey: \"&key=AIzaSyAF6LzDWnCO0yQ3_xVfXMYicN6MqUFl4q0\",\r\n\r\n        people: [\r\n            <Person key=\"1\" value=\"1\" onSetAddress = {(e,v) =>this.handleSetAddress(e,v)}></Person>,\r\n            <Person key=\"2\" value=\"2\" onSetAddress = {(e,v) =>this.handleSetAddress(e,v)}></Person>,\r\n            <Person key=\"3\" value=\"3\" onSetAddress = {(e,v) =>this.handleSetAddress(e,v)}></Person>,\r\n          ],\r\n        addresses: [\r\n            \"\",\"\",\"\"\r\n        ],\r\n\r\n        coords: [],\r\n\r\n        \r\n     }\r\n\r\n    handleSetAddress = (e,v) => {\r\n        let newAddresses = this.state.addresses.slice();\r\n        newAddresses[v-1] = e;\r\n        this.setState({addresses:newAddresses});\r\n\r\n    }\r\n\r\n    handleAddPerson = () => {\r\n        let newAddresses = [...this.state.addresses,\"\"];\r\n        this.setState({addresses:newAddresses});\r\n        this.setState({\r\n          people: [\r\n            ...this.state.people,\r\n            <Person\r\n              key={this.state.people.length + 1}\r\n              value={this.state.people.length + 1}\r\n              onSetAddress = {(e,v) =>this.handleSetAddress(e,v)}\r\n            ></Person>,\r\n          ],\r\n        });\r\n      };\r\n\r\n    handleDeletePerson = () => {\r\n        let newAddresses = this.state.addresses.slice(0,-1);\r\n        this.setState({addresses:newAddresses});\r\n        let people = this.state.people.slice(0, -1);\r\n        this.setState({\r\n          people: people,\r\n        });\r\n      };\r\n\r\n    \r\n    stringParser = a => {\r\n\r\n        let b = a.split(\" \");\r\n        let newString = \"\";\r\n\r\n        for (let i =0; i<b.length;i++){\r\n            newString += b[i] + \"%20\";\r\n        }\r\n\r\n        return newString.slice(0,-3);\r\n    }\r\n\r\n\r\n    async getCoords(link) {\r\n\r\n        const res = await fetch(link);\r\n        const data = await res.json();\r\n\r\n        return data['results'][0].geometry.location;\r\n    }\r\n\r\n\r\n    convertToCoords = async () => {\r\n\r\n        const all = this.state.addresses;\r\n        const url = \"https://maps.googleapis.com/maps/api/geocode/json?address=\";\r\n        const apiKey = this.state.apiKey;\r\n\r\n        let fullUrl;\r\n\r\n        let newCoords = [];\r\n        let a;\r\n\r\n        for (let i = 0; i<all.length;i++) {\r\n            fullUrl = url+all[i]+apiKey;\r\n            a = (await this.getCoords(fullUrl));\r\n            newCoords.push(a);\r\n        }\r\n\r\n        this.setState({coords:newCoords});\r\n\r\n    }\r\n\r\n\r\n    findMidPoint = (coordsList) => {\r\n        \r\n        const formatter = (x) => {\r\n\r\n            //Converting from degrees to radians\r\n            let lat1 = x.lat*(Math.PI/180);\r\n            let lon1 = x.lng*(Math.PI/180);\r\n            //Converting to cartesian coords\r\n\r\n            let x1 = Math.cos(lat1) * Math.cos(lon1);\r\n            let y1 = Math.cos(lat1) * Math.sin(lon1);\r\n            let z1 = Math.sin(lat1);\r\n\r\n            return [x1,y1,z1];\r\n\r\n        }\r\n\r\n        let formatted = [];\r\n\r\n        for (let i of coordsList) {\r\n            formatted.push(formatter(i))\r\n        }\r\n\r\n        let tmp;\r\n        let newResult = [];\r\n\r\n        for (let i = 0; i<formatted.length;i++) {\r\n            tmp = 0\r\n            for (let j of formatted) {\r\n\r\n                tmp += j[i]\r\n            }\r\n\r\n            newResult.push(tmp/formatted.length)\r\n\r\n        }\r\n\r\n        //newResult is now in format[x,y,z]\r\n\r\n        let lon = Math.atan2(newResult[1],newResult[0]);\r\n        let hyp = Math.sqrt(((newResult[0])**2) + ((newResult[1])**2));\r\n        let lat = Math.atan2(newResult[2],hyp);\r\n\r\n        //converting back to degrees\r\n        lat = lat * (180/Math.PI);\r\n        lon = lon * (180/Math.PI);\r\n\r\n        console.log(lat,lon);\r\n\r\n    }\r\n\r\n    calculator = () => {\r\n        this.convertToCoords\r\n    }\r\n\r\n\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <h1>Linq</h1>\r\n                <PersonList\r\n                people = {this.state.people} \r\n                onAddPerson = {()=>this.handleAddPerson()}\r\n                onDeletePerson = {()=>this.handleDeletePerson()}></PersonList>\r\n\r\n                <div><button onClick={this.findMidPoint}>Calculate</button></div>\r\n                \r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Application;"]},"metadata":{},"sourceType":"module"}