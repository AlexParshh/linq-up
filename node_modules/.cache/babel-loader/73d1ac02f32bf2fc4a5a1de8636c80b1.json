{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\linq-up\\\\src\\\\components\\\\Map.jsx\";\nimport React, { Component } from \"react\";\nimport { Map, Marker, GoogleApiWrapper, InfoWindow, Circle } from \"google-maps-react\";\nexport class MapContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      currentPhoto: \"\"\n    };\n\n    this.displayMarkers = () => {\n      return this.props.coords.map((address, index) => {\n        return /*#__PURE__*/React.createElement(Marker, {\n          onClick: this.onMarkerClick,\n          key: index,\n          id: index,\n          name: /*#__PURE__*/React.createElement(\"h4\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 20,\n              columnNumber: 17\n            }\n          }, this.props.addresses[index]),\n          pos: {\n            lat: address.lat,\n            lng: address.lng\n          },\n          position: {\n            lat: address.lat,\n            lng: address.lng\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 9\n          }\n        });\n      });\n    };\n\n    this.displayPlacesMarkers = () => {\n      let coordsPlaces = [];\n      let placesNames = [];\n      let ratings = [];\n      let photos = [];\n\n      for (let i = 0; i < this.props.nearbyPlaces.length; i++) {\n        coordsPlaces.push(this.props.nearbyPlaces[i].geometry.location);\n        placesNames.push(this.props.nearbyPlaces[i].name);\n        ratings.push(this.props.nearbyPlaces[i].rating);\n        photos.push(\"https://maps.googleapis.com/maps/api/place/photo?maxwidth=200&maxheight=200&photoreference=\" + this.props.nearbyPlaces[i].photos[0].photo_reference + this.props.apiKey);\n      }\n\n      return coordsPlaces.map((address, index) => {\n        return /*#__PURE__*/React.createElement(Marker, {\n          onClick: this.onMarkerClick,\n          photo: photos[index],\n          key: \"p\" + index,\n          id: \"place\",\n          rating: ratings[index],\n          name: /*#__PURE__*/React.createElement(\"h4\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 17\n            }\n          }, placesNames[index]),\n          position: {\n            lat: address.lat,\n            lng: address.lng\n          },\n          pos: {\n            lat: address.lat,\n            lng: address.lng\n          },\n          icon: {\n            url: \"http://maps.google.com/mapfiles/ms/icons/ltblue-dot.png\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 9\n          }\n        });\n      });\n    };\n\n    this.onMarkerClick = (props, marker) => {\n      this.setState({\n        selectedPlace: props,\n        activeMarker: marker,\n        showingInfoWindow: true\n      });\n      this.props.onSetMeetupPoint(this.state.activeMarker.pos);\n    };\n\n    this.onClose = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false\n        });\n        this.props.onSetMeetupPoint({\n          lat: this.props.midPoint[0],\n          lng: this.props.midPoint[1]\n        });\n      }\n    };\n  }\n\n  shouldComponentUpdate(nextProps) {\n    //prevents useless rerenders when user fidgets with radius slider\n    if (nextProps.radius !== this.props.radius) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Map, {\n      google: this.props.google,\n      zoom: 8,\n      style: {\n        width: \"40%\",\n        height: \"50%\"\n      },\n      initialCenter: {\n        lat: this.props.currentLocation[0],\n        lng: this.props.currentLocation[1]\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }\n    }, this.displayMarkers(), this.displayPlacesMarkers(), /*#__PURE__*/React.createElement(Marker, {\n      onClick: this.onMarkerClick,\n      key: \"midpoint\",\n      id: \"midpoint\",\n      name: !this.props.coords ? /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 38\n        }\n      }, \"Midpoint\") : /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }\n      }, \"Midpoint\"), /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }\n      }, this.props.midpoint[0]), /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }\n      }, this.props.midpoint[1])),\n      position: {\n        lat: this.props.midpoint[0],\n        lng: this.props.midpoint[1]\n      },\n      pos: {\n        lat: this.props.midpoint[0],\n        lng: this.props.midpoint[1]\n      },\n      icon: {\n        url: \"http://maps.google.com/mapfiles/ms/icons/green-dot.png\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Circle, {\n      radius: parseInt(this.props.radius) * 1.7,\n      center: {\n        lat: this.props.midpoint[0] === \"\" ? 0 : parseFloat(this.props.midpoint[0]),\n        lng: this.props.midpoint[0] === \"\" ? 0 : parseFloat(this.props.midpoint[1])\n      },\n      strokeColor: \"transparent\",\n      strokeOpacity: 0,\n      strokeWeight: 5,\n      fillColor: \"#FF0000\",\n      fillOpacity: 0.2,\n      visible: this.props.POI === \"\" ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(InfoWindow, {\n      marker: this.state.activeMarker,\n      visible: this.state.showingInfoWindow,\n      onClose: this.onClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }\n    }, this.state.selectedPlace.name, this.state.activeMarker.id === \"midpoint\" ? console.log(\"hello\") : \"\", this.state.activeMarker.id === \"place\" ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: this.state.activeMarker.photo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }\n    }, \"Rating: \", this.state.activeMarker.rating)) : \"\"))));\n  }\n\n}\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyAF6LzDWnCO0yQ3_xVfXMYicN6MqUFl4q0\"\n})(MapContainer); //console.log(this.state.activeMarker.pos)","map":{"version":3,"sources":["C:/Users/Alex/linq-up/src/components/Map.jsx"],"names":["React","Component","Map","Marker","GoogleApiWrapper","InfoWindow","Circle","MapContainer","state","showingInfoWindow","activeMarker","selectedPlace","currentPhoto","displayMarkers","props","coords","map","address","index","onMarkerClick","addresses","lat","lng","displayPlacesMarkers","coordsPlaces","placesNames","ratings","photos","i","nearbyPlaces","length","push","geometry","location","name","rating","photo_reference","apiKey","url","marker","setState","onSetMeetupPoint","pos","onClose","midPoint","shouldComponentUpdate","nextProps","radius","render","google","width","height","currentLocation","midpoint","parseInt","parseFloat","POI","id","console","log","photo"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Map, Marker, GoogleApiWrapper, InfoWindow, Circle } from \"google-maps-react\";\r\n\r\n\r\nexport class MapContainer extends Component {\r\n  state = {\r\n    showingInfoWindow: false,\r\n    activeMarker: {},\r\n    selectedPlace: {},\r\n    currentPhoto: \"\",\r\n  };\r\n\r\n  displayMarkers = () => {\r\n    return this.props.coords.map((address, index) => {\r\n      return (\r\n        <Marker\r\n          onClick={this.onMarkerClick}\r\n          key={index}\r\n          id={index}\r\n          name={<h4>{this.props.addresses[index]}</h4>}\r\n          pos={{\r\n            lat: address.lat,\r\n            lng: address.lng,\r\n          }}\r\n          position={{\r\n            lat: address.lat,\r\n            lng: address.lng,\r\n          }}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n\r\n  displayPlacesMarkers = () => {\r\n\r\n    let coordsPlaces = []\r\n    let placesNames = []\r\n    let ratings = []\r\n    let photos = []\r\n\r\n\r\n    for (let i = 0; i<this.props.nearbyPlaces.length;i++) {\r\n\r\n      coordsPlaces.push(this.props.nearbyPlaces[i].geometry.location);\r\n      placesNames.push(this.props.nearbyPlaces[i].name);\r\n      ratings.push(this.props.nearbyPlaces[i].rating);\r\n      photos.push(\"https://maps.googleapis.com/maps/api/place/photo?maxwidth=200&maxheight=200&photoreference=\"+this.props.nearbyPlaces[i].photos[0].photo_reference+this.props.apiKey)\r\n    }\r\n\r\n\r\n    return coordsPlaces.map((address, index) => {\r\n      return (\r\n        <Marker\r\n          onClick={this.onMarkerClick}\r\n          photo={photos[index]}\r\n          key={\"p\"+index}\r\n          id={\"place\"}\r\n          rating={ratings[index]}\r\n          name={<h4>{placesNames[index]}</h4>}\r\n          position={{\r\n            lat: address.lat,\r\n            lng: address.lng,\r\n          }}\r\n          pos={{\r\n            lat: address.lat,\r\n            lng: address.lng,\r\n          }}\r\n          icon={{\r\n            url: \"http://maps.google.com/mapfiles/ms/icons/ltblue-dot.png\",\r\n          }\r\n          }\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  onMarkerClick = (props, marker) => {\r\n\r\n    this.setState({\r\n    selectedPlace: props,\r\n    activeMarker: marker,\r\n    showingInfoWindow: true,\r\n  \r\n  });\r\n    this.props.onSetMeetupPoint(this.state.activeMarker.pos)\r\n}\r\n\r\n\r\nonClose = props => {\r\n  if (this.state.showingInfoWindow) {\r\n    this.setState({\r\n      showingInfoWindow: false\r\n    });\r\n    this.props.onSetMeetupPoint({lat:this.props.midPoint[0],lng:this.props.midPoint[1]})\r\n  }\r\n};\r\n\r\nshouldComponentUpdate(nextProps) {\r\n\r\n  //prevents useless rerenders when user fidgets with radius slider\r\n\r\n  if (nextProps.radius !== this.props.radius) {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n      <Map\r\n        google={this.props.google}\r\n        zoom={8}\r\n        style={{\r\n          width: \"40%\",\r\n          height: \"50%\",\r\n        }}\r\n        initialCenter={{\r\n          lat: this.props.currentLocation[0],\r\n          lng: this.props.currentLocation[1],\r\n        }}\r\n      >\r\n        {this.displayMarkers()}\r\n        {this.displayPlacesMarkers()}\r\n        <Marker\r\n          onClick={this.onMarkerClick}\r\n          key=\"midpoint\"\r\n          id=\"midpoint\"\r\n          name={!this.props.coords ? <h4>Midpoint</h4> : \r\n            <div>\r\n            <h4>Midpoint</h4>\r\n            <h4>{this.props.midpoint[0]}</h4>\r\n            <h4>{this.props.midpoint[1]}</h4>\r\n            </div>\r\n          }\r\n          position={{\r\n            lat: this.props.midpoint[0],\r\n            lng: this.props.midpoint[1],\r\n          }}\r\n          pos={{\r\n            lat: this.props.midpoint[0],\r\n            lng: this.props.midpoint[1],\r\n          }}\r\n          icon={{\r\n            url: \"http://maps.google.com/mapfiles/ms/icons/green-dot.png\",\r\n          }\r\n          }\r\n        ></Marker>\r\n\r\n        <Circle\r\n        radius={parseInt(this.props.radius)*1.7}\r\n        center={{\r\n          lat: (this.props.midpoint[0]=== \"\" ? 0 : parseFloat(this.props.midpoint[0])),\r\n          lng: (this.props.midpoint[0]=== \"\" ? 0 : parseFloat(this.props.midpoint[1])),\r\n        }}\r\n        strokeColor='transparent'\r\n        strokeOpacity={0}\r\n        strokeWeight={5}\r\n        fillColor='#FF0000'\r\n        fillOpacity={0.2}\r\n        visible={this.props.POI === \"\" ? false: true}\r\n        \r\n        ></Circle>\r\n\r\n        <InfoWindow\r\n          marker={this.state.activeMarker}\r\n          visible={this.state.showingInfoWindow}\r\n          onClose={this.onClose}\r\n\r\n        >\r\n          <div>\r\n            {this.state.selectedPlace.name}\r\n            {this.state.activeMarker.id === \"midpoint\" ? console.log(\"hello\") : \"\"}\r\n            {this.state.activeMarker.id === \"place\" ? \r\n            \r\n            <div>\r\n\r\n            <img src={this.state.activeMarker.photo}></img>\r\n            <h4>Rating: {this.state.activeMarker.rating}</h4>\r\n            </div>\r\n            \r\n             : \"\"}\r\n          </div>\r\n        </InfoWindow>\r\n\r\n      </Map>\r\n\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: \"AIzaSyAF6LzDWnCO0yQ3_xVfXMYicN6MqUFl4q0\",\r\n})(MapContainer);\r\n\r\n//console.log(this.state.activeMarker.pos)"]},"metadata":{},"sourceType":"module"}